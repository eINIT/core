DESCRIPTION="Enable/Disable eInit shell/daemon modules"
MAINTAINER="rmh3093@gmail.com"

# find a list of modules
find_modules() {
   modules=`ls ${ROOT}/etc/einit/modules/${1}`
        for module in $modules ; do
                [[ -f ${ROOT}/etc/einit/modules/${1}/${module} ]] && echo $(basename ${module} )
        done

}

# disable module by removing the symlink in the _used folder
disable() {
        module=${2}
        if is_number "${module}" ; then
                modules=( $(find_modules ${1}) )
                module=${modules[$(( ${module} - 1 ))]}
        fi
        if [[ -z ${module} ]] ; then
                die -q "Module \"${2}\" doesn't appear to be valid!"
        elif [[ -f "${ROOT}/etc/einit/modules/${1}/${module}" ]] ; then
		rm "${ROOT}/etc/einit/modules/_used/${1}/${module}"
        else
                die -q "Module \"${2}\" doesn't appear to be valid!"
   fi
}

enable_all() {
	modules=( $(find_modules ${1} ) )
	if [[ -n ${modules[@]} ]] ; then
        	local i
		for (( i = 0 ; i < ${#modules[@]} ; i = i + 1 )) ; do
		        if [[ -L "${ROOT}/etc/einit/modules/_used/${1}/${modules[${i}]}" ]] ; then
                		# existing symlink
		                if ! disable "${1}" "${modules[${i}]}" ; then
                		        die -q "Couldn't remove existing symlink"
		                elif ! enable "${1}" "${modules[${i}]}" ; then
                		        die -q "Couldn't set a new symlink"
		                fi

		        elif [[ -e "${ROOT}/etc/einit/modules/_used/${1}/${modules[${i}]}" ]] ; then
                		# we have something strange
		                die -q "Sorry, ${ROOT}/etc/einit/modules/_used/${1}/${modules[${i}]} confuses me"

		        else
		                enable "${1}" "${modules[${i}]}" || die -q "Couldn't set a new symlink"
		        fi	
		done
	fi
}

# enable module by creating a symlink in the _used folder
enable() {
        module=${2}
        if is_number "${module}" ; then
                modules=( $(find_modules ${1}) )
                module=${modules[$(( ${module} - 1 ))]}
        fi
        if [[ -z ${module} ]] ; then
                die -q "Module \"${2}\" doesn't appear to be valid!"
        elif [[ -f "${ROOT}/etc/einit/modules/${1}/${module}" ]] ; then
                ln -s "${ROOT}/etc/einit/modules/${1}/${module}" "${ROOT}/etc/einit/modules/_used/${1}/${module}"
		if [[ "${3}" == "-r" ]] ; then
			reqs=`cat ${ROOT}/etc/einit/modules/${1}/${module} | awk '/requires/' | sed -e 's/.*requires=//' | awk '{gsub(/:/," ");gsub(/\"/,"");print}' | sed -e 's/sysconf //' | sed -e 's/mount\/local //' | sed -e 's/mount\/critical //' | sed -e 's/hostname //' | sed -e 's/tty //' | sed -e 's/ipc //'`
			check="daemon shell"
			for r in ${reqs} ; do
				for c in ${check} ; do
			                modules=( $(find_modules ${c}) )
     					if [[ -n ${modules[@]} ]] ; then
	        		        	local i
                				for (( i = 0 ; i < ${#modules[@]} ; i = i + 1 )) ; do
							module=`cat ${ROOT}/etc/einit/modules/${c}/${modules[i]} | awk '/provides=/' | grep ${r}`
							if [[ -n ${module} ]] ; then
					                        if [[ -L "${ROOT}/etc/einit/modules/_used/${c}/${modules[${i}]}" ]] ; then
					                                # existing symlink
					                                if ! disable "${c}" "${modules[${i}]}" ; then
					                                        die -q "Couldn't remove existing symlink"
					                                elif ! enable "${c}" "${modules[${i}]}" ; then
					                                        die -q "Couldn't set a new symlink"
					                                fi
					
					                        elif [[ -e "${ROOT}/etc/einit/modules/_used/${c}/${modules[${i}]}" ]] ; then
					                                # we have something strange
					                                die -q "Sorry, ${ROOT}/etc/einit/modules/_used/${c}/${modules[${i}]} confuses me"
					                        else
				        	                        enable "${c}" "${modules[${i}]}" || die -q "Couldn't set a new symlink"
								fi
							fi
						done
					fi
				done
			done
		fi
        else
                die -q "Module \"${2}\" doesn't appear to be valid!"
        fi
}

### list action ###
describe_list() {
   echo "List available modules"
}

describe_list_parameters() {
        echo "<type>"
}

describe_list_options() {
        echo "type : Module type (either 'shell' or 'daemon')"
}

do_list() {
        if [[ -z ${1} ]] ; then
                # no parameter
                die -q "You didn't tell me what type of module to list"
	else
        	modules=( $(find_modules ${1} ) )
      		write_list_start "Available ${1} modules:"
		if [[ -n ${modules[@]} ]] ; then
        		local i
			for (( i = 0 ; i < ${#modules[@]} ; i = i + 1 )) ; do
				[[ -L ${ROOT}/etc/einit/modules/_used/${1}/${modules[${i}]} ]] && \
				modules[${i}]="${modules[${i}]} $(highlight '*' )"
			done
        	        write_numbered_list "${modules[@]}"
		else
			write_kv_list_entry "(none found)" ""
		fi
	fi
}

### enable action ###
describe_disable() {
        echo "Enable a module"
}

describe_enable_parameters() {
        echo "<type> <module>"
}

describe_enable_options() {
        echo "type : Module type (either 'shell' or 'daemon')"
        echo "module : Module name or number (from 'list' action)"
        echo " : or type '--all' to enable all modules"
}

do_enable() {
        local r= module=${2}
        if is_number "${module}" ; then
                modules=( $(find_modules ${1}) )
                module=${modules[$(( ${module} - 1 ))]}
        fi
        if [[ "${3}" == "-r"  ]] ; then
		r="-r"
		echo "this dont work yet"
	fi
        if [[ -z ${1} ]] ; then
                # no parameter
                die -q "You didn't tell me what type of module to enable"

        elif [[ -z ${2} ]] ; then
                # no parameter
                die -q "You didn't tell me what module to enable"

        elif [[ "${2}" == "--all"  ]] ; then
		enable_all ${1}

        elif [[ -L "${ROOT}/etc/einit/modules/_used/${1}/${module}" ]] ; then
                # existing symlink
                if ! disable "${1}" "${2}" ; then
                        die -q "Couldn't remove existing symlink"
                elif ! enable "${1}" "${2}" "${3}"; then
                        die -q "Couldn't set a new symlink"
                fi

        elif [[ -e "${ROOT}/etc/einit/modules/_used/${1}/${2}" ]] ; then
                # we have something strange
                die -q "Sorry, ${ROOT}/etc/einit/modules/_used/${1}/${2} confuses me"

        else
                enable "${1}" "${2}" "${3}" || die -q "Couldn't set a new symlink"
        fi
}

### disable action ###
describe_disable() {
        echo "Disable a module"
}

describe_disable_parameters() {
        echo "<type> <module>"
}

describe_disable_options() {
        echo "type : Module type (either 'shell' or 'daemon')"
        echo "module : Module name or number (from 'list' action)"
        echo " : or type '--all' to disable all modules"
}

do_disable() {
        if [[ -z ${1} ]] ; then
                # no parameter
                die -q "You didn't tell me what type of module to disable"

        elif [[ -z ${2} ]] ; then
                # no parameter
                die -q "You didn't tell me what module to disable"

        elif [[ "${2}" == "--all" ]] ; then
		rm -rf ${ROOT}/etc/einit/modules/_used/${1}/* || die -q "Couldn't disable modules"

	else
                disable "${1}" "${2}" || die -q "Couldn't disable module"
        fi
}

# vim: set ft=eselect :
