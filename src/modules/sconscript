Import(['env', 'InstallDirModules', 'InstallDirBootstrap', 'Modules', 'ModulesLinux', 'ModulesCompatibility', 'ExternalModules', 'ModulesBSD', 'uname'])

menv = env.Clone (SHLIBPREFIX = '', CCFLAGS = '-DEINIT_MODULE')

def buildModule(name, location, e):
 e.Install(InstallDirModules, e.LoadableModule(name, location + '/' + name + '.c'))

def buildModuleBootStrap(name, e):
 e.Install(InstallDirBootstrap, e.LoadableModule(name, name + '.c'))

librt = [ 'rt' ]

if uname == 'Darwin':
 menv.Append (LINKFLAGS = '$LINKFLAGS -Wl,-bundle_loader,src/einit-core')
 librt = []

for x in ModulesBSD:
 buildModule(x, 'bsd', menv)

for x in ModulesLinux:
 buildModule(x, 'linux', menv)

buildModuleBootStrap('bootstrap-configuration-stree', menv)
buildModuleBootStrap('bootstrap-configuration-xml-expat', menv.Clone (LIBS = 'expat-local', LIBPATH=['#expat']))

for x in Modules:
 buildModule(x, '.', menv)

for x in ModulesCompatibility:
 buildModule(x, 'compatibility', menv)

if 'ipc-9p' in ExternalModules:
 buildModule ('ipc-9p', '.', menv.Clone (LIBS=['ixp-local'], LIBPATH=['#libixp']))

if 'feedback-visual-textual' in ExternalModules:
 buildModule ('feedback-visual-textual', '.', menv.Clone (LIBS=librt))

if 'module-logic-v4' in ExternalModules:
 buildModule ('module-logic-v4', '.', menv.Clone (LIBS=librt))

import os

if 'module-scheme-guile' in ExternalModules:
 e = menv.Clone()
 f = os.popen ('guile-config compile', 'r')
 if f:
  a = f.read()
  a.strip()
  e.Append (CFLAGS = '${CCFLAGS} ' + a)
  f.close()

 f = os.popen ('guile-config link', 'r')
 if f:
  a = f.read()
  a.strip()
  e.Append (LINKFLAGS = '${LINKFLAGS} ' + a)
  f.close()

 e.Append (LIBS=librt)
 buildModule ('module-scheme-guile', '.', e)
