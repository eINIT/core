util: last-rites libeinit.${SO}.2.0.0 libeinit++.${SO}.2.0.0 einit-helper

install: util
	${INSTALL} ${BINIPARAM} -d ${DESTDIR}/${BINDIR}
	${INSTALL} ${BINIPARAM} -d ${DESTDIR}/${LIBDIR}/bin
	${INSTALL} ${BINIPARAM} last-rites ${DESTDIR}/${LIBDIR}/bin
	${INSTALL} ${BINIPARAM} einit-helper ${DESTDIR}/${LIBDIR}/bin
	ln -fs ../sbin/einit ${DESTDIR}/${BINDIR}/einit
	${INSTALL} ${BINIPARAM} libeinit.${SO}.2.0.0 ${DESTDIR}/${LIBDIR}/../
	${INSTALL} ${BINIPARAM} libeinit++.${SO}.2.0.0 ${DESTDIR}/${LIBDIR}/../
	ln -fs libeinit.${SO}.2.0.0 ${DESTDIR}/${LIBDIR}/../libeinit.${SO}.2
	ln -fs libeinit.${SO}.2 ${DESTDIR}/${LIBDIR}/../libeinit.${SO}
	ln -fs libeinit++.${SO}.2.0.0 ${DESTDIR}/${LIBDIR}/../libeinit++.${SO}.2
	ln -fs libeinit++.${SO}.2 ${DESTDIR}/${LIBDIR}/../libeinit++.${SO}

set.o: set-lowmem.o
	cp set-lowmem.o set.o

itree.o: itree-trinary-splay.o
	cp itree-trinary-splay.o itree.o

#tree.o: tree-linear.o
#	cp tree-linear.o tree.o

tree.o: tree-itree.o
	cp tree-itree.o tree.o

einit-helper: einit-helper.o libeinit.${SO}.2.0.0
	$(CLD) einit-helper.o ./libeinit.${SO}.2.0.0 -o einit-helper $(STATIC)

last-rites: last-rites.o bitch.o utility.o $(asmobjects) itree.o set.o set-common.o
	$(CLD) last-rites.o bitch.o utility.o $(asmobjects) itree.o set.o set-common.o -o last-rites $(STATIC)

libeinit.${SO}: libeinit.${SO}.2.0.0

libeinit.${SO}.2.0.0: libeinit.o utility.o bitch.o tree.o itree.o set.o set-common.o $(asmobjects)
	if test "${SO}" = "so"; then ${CLD} ${XDYNAMIC_SIMPLE} -Wl,-soname,libeinit.so.2 libeinit.o utility.o bitch.o tree.o itree.o set.o set-common.o $(asmobjects) ${LIBIXP_LIBS} -o libeinit.${SO}.2.0.0 ${LPA}; else ${CLD} ${XDYNAMIC_SIMPLE} libeinit.o utility.o bitch.o tree.o itree.o set.o set-common.o $(asmobjects) ${LIBIXP_LIBS} -o libeinit.${SO}.2.0.0 ${LPA}; fi
	ln -fs libeinit.${SO}.2.0.0 libeinit.${SO}.2
	ln -fs libeinit.${SO}.2 libeinit.${SO}

libeinit++.${SO}: libeinit++.${SO}.2.0.0

libeinit++.${SO}.2.0.0: libeinit.${SO}.2.0.0 libeinit++.o
	if test "${SO}" = "so"; then ${CXXLD} ${XDYNAMIC_SIMPLE} -Wl,-soname,libeinit++.so.2 libeinit++.o ./libeinit.${SO}.2.0.0 -o libeinit++.${SO}.2.0.0; else ${CXXLD} ${XDYNAMIC_SIMPLE} libeinit++.o ./libeinit.${SO}.2.0.0 -o libeinit++.${SO}.2.0.0; fi
	ln -fs libeinit++.${SO}.2.0.0 libeinit++.${SO}.2
	ln -fs libeinit++.${SO}.2 libeinit++.${SO}

test: utility.o bitch.o $(asmobjects) set.o set-common.o test-core-apply-variables.o test-core-itree.o itree.o test-core-stree.o tree.o
	$(CLD) test-core-apply-variables.o utility.o bitch.o $(asmobjects) set.o set-common.o itree.o -o test-core-apply-variables $(STATIC)
	./test-core-apply-variables
	$(CLD) test-core-itree.o itree.o utility.o bitch.o $(asmobjects) set.o set-common.o -o test-core-itree $(STATIC)
	./test-core-itree
	$(CLD) test-core-stree.o tree.o itree.o utility.o bitch.o $(asmobjects) set.o set-common.o -o test-core-stree $(STATIC)
	./test-core-stree

test-libraries: test-libraries-libeinit++.o libeinit++.${SO}
	${CXXLD} test-libraries-libeinit++.o libeinit++.${SO} -o ./test-libraries-libeinit++
	LD_LIBRARY_PATH="." valgrind ./test-libraries-libeinit++
