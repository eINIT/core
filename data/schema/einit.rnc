namespace execute = "http://www.einit.org"

start = eINIT | Module | Network

eINIT = element einit {
  ( attribute prefix { "services-virtual-module" } & ModuleContents* ) |

  ( attribute prefix { "configuration-network" } & NetworkContents* ) |

  ( attribute prefix { "configuration-services" } &
    element * {
      attribute * { text }* &
      element * {
        attribute * { text }*
      }*
    }* ) |

  ( attribute prefix { "configuration-storage-fstab" } & FSTab ) |

  ( attribute prefix { "configuration-compatibility" } & ConfigurationCompatibility ) |

# the next ones are only temporary
  ( attribute prefix { "services-virtual-network" } &
    ( element ip { attribute * { text }* } | element ifctl { attribute * { text }* } | element misc { attribute * { text }* } )* ) |

  ( eINITMain )
}

IDAttribute = attribute id { text }

eINITMain =
  Core ? &
  Configuration ? &
  Services ? &
  Special ? &
  Subsystems ? &
  Mode * &
  Information ? &
  element ttys { TTYAttribute, attribute sysv-style { Boolean }? } ? &
  element feedback-ttys { TTYAttribute } ?

Core = element core {
  element settings {
    element configuration {
      element on-line-modifications { attribute save-to { text } }? &
      element multi-node-variables { attribute allow { text } }?
    }? &
    element modules {
      IDAttribute,
      PathAttributes
    }? &
    element configuration-path {
      StringAttribute
    }? &
   element allow-code-unloading { BooleanAttribute }?
  }* &
  element scheduler {
    element shutdown-function-suffixes { StringAttribute }? &
    element niceness { attribute core { text }, attribute tasks { text } }?
  }* &
  element module-logic {
    element init.d-path { StringAttribute }? &
    element maintain-init.d { StringAttribute, BooleanAttribute }?
  }* &
  element commands {
    element include {
      element file {
        StringAttribute
      }* & 
      element directory {
        PathAttributes
      }*
    }*
  }*
}

Configuration = element configuration {
  element system {
    element ctrl-alt-del { BooleanAttribute }* &
    element daemon-spawn-timeout { IntegerAttribute }* &
    element daemon-term-timeout-primary { IntegerAttribute }* &
    element daemon-term-timeout-secondary { IntegerAttribute }* &
    element shell { StringAttribute }* &
    element shell-exec-timeout { IntegerAttribute }* &
    element exec-envfile-base { StringAttribute }* &
    element proc-path { StringAttribute }* &
    element preload { attribute binaries { text }?, BooleanAttribute }* &
    element log { BooleanAttribute }* &
    element kexec-to-reboot {
     BooleanAttribute,
     attribute use-proc { Boolean }?,
     attribute kernel-image { string }?,
     attribute kernel-options { string }?,
     attribute kernel-initrd { string }? }* &
    element kexec-calls {
      attribute load { text },
      attribute load-initrd { text },
      attribute execute { text }
    }* &

    element device-manager { StringAttribute }? &

    element hotplug {
     element support-legacy-hotplug-scripts { BooleanAttribute }? &
     element handler { StringAttribute }?
    }? &
    element coldplug { BooleanAttribute }? &
    element timezone { StringAttribute }?
  }* &

  element linux {
    element cpufreq {
     attribute cpus { text }? ,
     attribute in-switch { text },
     attribute post-switch { text }
    }?
  }? &

  element bootchart {
    element active { BooleanAttribute }? &
    element save-to { StringAttribute }? &
    element polling-interval { IntegerAttribute }? &
    element process-accounting { BooleanAttribute }? &
    element stop-logging-on-process { StringAttribute }? &
    element extra-waiting-time { IntegerAttribute }? &
    element max-log-size { IntegerAttribute }? &

    element chart-directory { StringAttribute }? &
    element chart-format { StringAttribute }?
  }? &

  element environment {
    element global { IDAttribute, StringAttribute }* &
    element safe { attribute * { text }* }?
  }* &

  element kernel {
    element modules {
      element autoload.d { attribute file { text } }? &
      element load-in-parallel { BooleanAttribute }? &
      element * { StringAttribute, BooleanAttribute?, attribute provide-service { Boolean }? }*
    }*
  }* &

  element edev {
    element devicefile-rule {
      attribute * { text }*
    }*
  }* &

  Network* &

  element feedback {
    element visual {
      element std-io {
        attribute stdio { text },
        attribute stderr { text },
        attribute console { text } ?,
        attribute activate-vt { text }?,
        attribute verbose-output { text }?,
        attribute kernel-vt { text }?,
        attribute boot-done-chvt { text }?
      }?
    }*
  }* &

  element command {
    element rmmod { CommandAttributes }? &
    element modprobe { CommandAttributes }?
  }* &

  TTY ? &

  element compatibility {
    ConfigurationCompatibility
  } ? &

  element secondary {
   element if { attribute file-exists { text }? &
    element file-sh { IDAttribute & 
     ( attribute configuration-network-hostname { text } |
       attribute configuration-peripherals-keyboard { text } )
    }*
   }?
  }? &

  element storage {
    element update-steps { StringAttribute }? &
    element maintain-mtab { BooleanAttribute, StringAttribute }? &
    element filesystem-guessing-order { StringAttribute }? &

    element mountpoints {
      element no-umount { StringAttribute }? &
      element system { StringAttribute }? &
      element critical { StringAttribute }?
    } ? &

    element fsck-command { StringAttribute, IDAttribute }* &

    element block-devices {
      element dev-constraints { PathAttributes }? &
      element source { StringAttribute }?
    }? &

    element fstab {
      FSTab
    }?
  } ?
}

Services = element services {
  element virtual {
    Module*
  } ? &

  element alias {
    ( element * { attribute group { List_of_services }, attribute seq { "most" | "all" | "any" | "any-iop" } }*
    | ( IDAttribute, StringAttribute ))
  }* &

  element prefer {
   element * { StringAttribute }*
  } ? &

  element override {
   element module { IDAttribute, ModuleDependenciesOptional, ModuleDependenciesRequired? } *
  } ? &

  element transform {
   IDAttribute,
   attribute module-id { text },
   attribute in { text },
   attribute out { text },
   attribute strip-from { text }?
  }*
}

Special = element special {
  element * { text }*
}

Subsystems = element subsystem {
 element c {
  element active { BooleanAttribute }? &

  element compile-to { StringAttribute }? &
  element compile { attribute c { text } }? &
  element sources { IDAttribute & PathAttributes } *
 } ? &

 element ipc-9p {
  attribute socket { text },
  attribute group { text },
  attribute chmod { text }
 } ? &

 element xml-sh-compiler {
  element active { BooleanAttribute }? &
  element compile-to { StringAttribute }?
 } ? &

 element network {
  element dhcp {
   element client {
    IDAttribute,
    attribute up { text },
    attribute down { text },
    attribute need-binaries { text },
    attribute pid { text }?
   } *
  } ? &
  element interface-defaults {
   StringAttribute,
   element * {
    IDAttribute?,
    InterfaceDataV2
   }*
  } ?
 } ? &

 element scheme {
  element modules { IDAttribute & PathAttributes } *
 } ?
}

Mode = element mode {
  IDAttribute &
  attribute base { text }? &
  attribute wait-for-base { text }? &
  attribute cooldown { text }? &

  element enable { attribute services { List_of_services } & attribute critical { text }? }? &
  element disable { attribute services { List_of_services } }? &

  eINITMain &

  element overrides {
    eINITMain
  }?
}

TTY = element tty {
  element manage-utmp { BooleanAttribute }? &

  element * {
    attribute dev { text },
    attribute command { text },
    attribute restart { Boolean }
  }*
}

ConfigurationCompatibility =
  element sysv {
     attribute utmp { Boolean }? &
     attribute wtmp { Boolean }? &
    element utmp { BooleanAttribute }? & #Not sure if those
    element wtmp { BooleanAttribute }? & #should be here...

    element distribution {
      StringAttribute &

      element gentoo {
        element init.d { PathAttributes }? &
        element runlevels { PathAttributes & attribute exclusive { text }? }? &
        element parse-env.d { BooleanAttribute }? &
        element softlevel-tracker { BooleanAttribute & PathAttributes }? &
        element init.d-scriptlets { attribute svcdir-init { text }? & attribute execute { text }? }? &
        element service-group { IDAttribute & attribute service { text } & attribute put-into { text } }* &
        element runlevels-for-dependencies { StringAttribute }?
      }
    }? &

    element simulate-runlevel { attribute now { text } }?
  }

FSTab =
  element node {
    IDAttribute?,
    attribute mountpoint { text }?,
    attribute label { text }?,
    attribute device { text }?,
    attribute fs { text }?,
    attribute uuid { text }?,
    attribute options { text }?,
    attribute before-mount { text }?,
    attribute after-mount { text }?,
    attribute before-umount { text }?,
    attribute after-umount { text }?,
    attribute manager { text }?,
    attribute requires { text }?,
    attribute before { text }?,
    attribute after { text }?
  }* &
  element use-legacy-fstab { BooleanAttribute }? &
  element node-order {
    IDAttribute,
    attribute after { text }?,
    attribute before { text }?
  }*

Information =
  element information {
    element filesystem {
      element type {
        IDAttribute,
        attribute flags { text }?,
        attribute requires { text }?,
        attribute before { text }?,
        attribute after { text }?
      }*
    }?
  }

Boolean = "yes" | "no" | "true" | "false" | "enabled" | "disabled"

BooleanAttribute = attribute b { Boolean }
StringAttribute = attribute s { text }

IntegerAttribute = attribute i { text }

PathAttributes = attribute path { text }, attribute pattern-allow { text }?, attribute pattern-disallow { text }?
CommandAttributes = attribute with-env { text }, StringAttribute?

include "einit-module.rnc"
include "einit-network.rnc"
include "data-types.rnc"
