#!/bin/sh
# -----------------
# einit configure script
# -----------------
# tiny configure script... i might consider adding more on this some other time...
# (i'm just trying to make sure I don't violate any licenses by specifically not using any non-LGPL GPL tools)
# -----------------
# Copyright (c) 2006, Magnus Deininger
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that
# the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright notice, this list of conditions and the
#      following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
#      the following disclaimer in the documentation and/or other materials provided with the distribution.
#    * Neither the name of the project nor the names of its contributors may be used to endorse or promote
#      products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -----------------

INCLUDEPATH="/usr/local/include"
INTERNALMODULES="einit-config-xml-expat"
EXTERNALMODULES=""

BUILDNUMBER=`cat buildnumber`
if test -d .svn; then
	ISSVN=1
	echo "configuring eINIT-svn-${BUILDNUMBER}..."
else
	ISSVN=0
	echo "configuring eINIT-${BUILDNUMBER}..."
fi

# this is on by default for now
PMODULES="compatibility configuration"

TREETYPE="linear"

echo -n "checking options [";
for param in $@; do
	short=${param%%=*};
	if test "$short" = "--internal-modules"; then
		echo -n " INTERNAL";
		INTERNALMODULES=${param#*=};
	elif test "$short" = "--external-modules"; then
		echo -n " EXTERNAL";
		EXTERNALMODULES=${param#*=};
	elif test "$short" = "--prefix"; then
		echo -n " PREFIX";
		PREFIX=${param#*=};
	elif test "$short" = "--tree-type"; then
		echo -n " TREETYPE";
		TREETYPE=${param#*=};
	elif test "$short" = "--with-include"; then
		echo -n " INCLUDE";
		INCLUDEPATH="${INCLUDEPATH} ${param#*=}";
	elif test "$short" = "--host"; then
		echo -n " HOST";
		RCHOST="${param#*=}";
	elif test "$short" = "--target"; then
		echo -n " TARGET";
		RCTARGET="${param#*=}";
	elif test "$short" = "--version"; then
		echo -n " VERSION";
		RCVERSION="${param#*=}";
	elif test "$param" = "--debug"; then
		echo -n " DEBUG";
		XCFLAGS="$XCFLAGS -DDEBUG -g";
	elif test "$param" = "--enable-linux"; then
		echo -n " LINUX";
		PMODULES="$PMODULES linux";
	elif test "$param" = "--enable-bsd"; then
		echo -n " BSD";
		PMODULES="$PMODULES bsd";
	elif test "$param" = "--enable-efl"; then
		echo -n " EFL";
		PMODULES="$PMODULES efl";
	elif test "$param" = "--help"; then
		echo -n " HELP";
		HELP="1";
	elif test "$param" = "--bitch-a-lot"; then
		echo -n " BITCHY";
		XCFLAGS="$XCFLAGS -Wall -DBITCHY";
	elif test "$param" = "--use-posix-regex"; then
		echo -n " REGEX";
		XCFLAGS="$XCFLAGS -DPOSIXREGEX";
	elif test "$param" = "--pthread-wait-bug"; then
		echo -n " PTHREAD-WAIT-BUG";
		XCFLAGS="$XCFLAGS -DBUGGY_PTHREAD_CHILD_WAIT_HANDLING";
        elif test "$param" = "--uclibc"; then
                echo -n " UC_LIBC";
                XCFLAGS="$XCFLAGS -DUC_LIBC";
	elif test "$param" = "--no-nix-environ"; then
		echo -n " NO-NIX-ENVIRON";
		XCFLAGS="$XCFLAGS -DNONIXENVIRON";
        elif test "$param" = "--svn"; then
                echo -n " SVN";
                ISSVN=1;
        elif test "$param" = "--ebuild"; then
                echo -n " EBUILD";
                EBUILD="1";
	fi;
done;
echo " ]";

if test "$HELP" = "1"; then
	echo "Usage:
 ./configure [--prefix=path] [--enable-*] [--debug] [--help]

Options:
 --prefix=path          use this to set a path to install to (absolute!)
 --with-include=path    use this to set a path to install to (absolute!)
 --enable-linux         enable compilation of linux-specific modules
 --enable-bsd           enable compilation of bsd-specific modules
 --enable-efl           enable compilation of modules that utilise the efl
 --bitch-a-lot          tell all programs used to compile and link to be more
                        verbose
 --use-posix-regex      use posix.2 regular expressions
 --pthread-wait-bug     some pthreads implementations don't allow all threads
                        in one process to wait on other processes' children
 --uclibc		support uclibc
 --internal-modules     the modules to compile-in
 --external-modules     the modules to compile as loadable .so-files
 --tree-type=           define the type of tree-structures einit should use.
 --debug                will #define DEBUG.
 --help                 display this text and exit.
 --svn                  indicate that this is a build off SVN.
 --ebuild               indicate that this script was called from portage/e.a.";
exit;
fi;

echo -n "/etc/make.conf ["
if test "$EBUILD" = "1"; then
	echo -n " skipping (ebuild)";
elif test -n ""${CFLAGS}; then
	echo -n " skipping (CFLAGS set)";
elif test -f /etc/make.conf; then
	echo -n " sourcing";
	source /etc/make.conf;
else
	echo -n " not found";
fi
echo " ]"

if test -n "$RCHOST"; then CHOST=$RCHOST; fi;
if test -n "$RCTARGET"; then CTARGET=$RCTARGET; fi;
#GCCVERSION=`gcc --version`;

echo -n "checking system type... "
if test -n "$CHOST"; then
	CHOST=$CHOST;
else
#	CHOST=${GCCVERSION%%gcc-* *};
#	CHOST="${CHOST}libc";
	CHOST="gcc";
fi
echo " $CHOST";

echo -n "checking target system type... "
if test -n "$CTARGET"; then
	CTARGET=$CTARGET;
else
	CTARGET=$CHOST;
fi
echo " $CTARGET";

echo -n "checking for a compiler... "
if test -n "$CC"; then
	echo "got one! ($CC)";
else
	if test -x "$(which ${CTARGET}-gcc-${RCVERSION} 2>/dev/null)"; then CC="${CTARGET}-gcc-${RCVERSION}";
	elif test -x "$(which ${CTARGET}-gcc 2>/dev/null)"; then CC="${CTARGET}-gcc";
	elif test -x "$(which ${CTARGET}-cc 2>/dev/null)"; then CC="${CTARGET}-cc";
	elif test -x "$(which ${CHOST}-gcc-${RCVERSION} 2>/dev/null)"; then CC="${CHOST}-gcc-${RCVERSION}";
	elif test -x "$(which ${CHOST}-gcc 2>/dev/null)"; then CC="${CHOST}-gcc";
	elif test -x "$(which ${CHOST}-cc 2>/dev/null)"; then CC="${CHOST}-cc";
	elif test -x "$(which gcc 2>/dev/null)"; then CC=cc;
	elif test -x "$(which icc 2>/dev/null)"; then CC=cc;
	elif test -x "$(which cc 2>/dev/null)"; then CC=cc; fi;
	if test -n "$CC"; then
		echo "$CC";
	else
		echo "no compiler found, bailing out!"; exit;
	fi;
fi

echo "finding absolute include directory..."
INCLUDE="-I`pwd`/src/include";
echo -n "searching for expat.h..."
EXPAT=`find -d ${INCLUDEPATH} -iname expat.h 2>/dev/null`
if test -n {EXPAT}; then
	for x in ${EXPAT}; do
		x=${x%/*};
		echo -n " ${x}";
		INCLUDE="${INCLUDE} -I${x}";
	done;
	echo "";
else
	echo "not found";
	echo "expat is currectly a critical requirement, you need to install it for einit to compile and work. Check your OS-distribution's package repository, or go to http://expat.sf.net/.";
fi

echo -n "checking system type... "
CCL="\${CC} \${INCLUDE} \${CFLAGS} -fPIC"
if test -n "`uname -a|grep -i 'darwin kernel'`"; then
	echo "Darwin";
	XCFLAGS="$XCFLAGS -DDARWIN -DPOSIX -DBSD";
	XDYNAMIC="";
	LLD="-bundle -Wl,-bundle_loader,`pwd`/src/einit";
elif test -n "`uname -a|grep -i 'Linux'`"; then
	echo "Linux";
	XCFLAGS="$XCFLAGS -DPOSIX -DLINUX";
	LLD="-shared";
	XDYNAMIC="-Wl,-export-dynamic";
	LPA="-lpthread";
else
	echo "(guess) generic posix-ish unix";
	XCFLAGS="$XCFLAGS -DPOSIX";
	LLD="-shared";
	XDYNAMIC="-Wl,-export-dynamic";
	LPA="-lpthread";
fi

echo "creating config.mk..."
echo "PREFIX = $PREFIX
ETCDIR = ${PREFIX}/etc/einit
LIBDIR = ${PREFIX}/lib
MODDIR = ${PREFIX}/lib/einit
BINDIR = ${PREFIX}/bin
SBINDIR = ${PREFIX}/sbin

INSTALL = install
IPARAM =
SOIPARAM = \${IPARAM}
BINIPARAM = \${IPARAM}

PMODULES = $PMODULES
OPTIONS = $OPTIONS
INCLUDE = $INCLUDE

XDYNAMIC = $XDYNAMIC
BUILDNUMBER = $BUILDNUMBER
ISSVN = $ISSVN
TREETYPE = ${TREETYPE}

CC = $CC
CFLAGS = $CFLAGS$XCFLAGS
LDFLAGS = $LDFLAGS
CCC = \${CC} \${INCLUDE} \${CFLAGS} -DBUILDNUMBER=\"\\\"\${BUILDNUMBER}\\\"\" -DISSVN=\${ISSVN}
CCL = $CCL -DBUILDNUMBER=\"\\\"\${BUILDNUMBER}\\\"\" -DISSVN=\${ISSVN}
CLD = \${CC} \${LDFLAGS}
LLD = \${CC} \${LDFLAGS} $LLD
XLLD = $LLD
LPA = $LPA" > config.mk

echo "creating module-configuration.c"
echo "/* created by the configure-script, you shouldn't modify this */

#ifndef _EINIT_MODULES_CONFIGURATION_H
#define _EINIT_MODULES_CONFIGURATION_H

" > src/include/einit-modules/configuration.h

if test -n "`echo ${INTERNALMODULES}|grep einit-config-xml-expat`"; then
 echo "#define EINIT_MODULES_XML_EXPAT 'y'" >> src/include/einit-modules/configuration.h;
elif test -n "`echo ${EXTERNALMODULES}|grep einit-config-xml-expat`"; then
 echo "#define EINIT_MODULES_XML_EXPAT 'm'" >> src/include/einit-modules/configuration.h;
else
 echo "#define EINIT_MODULES_XML_EXPAT 'n'" >> src/include/einit-modules/configuration.h;
fi;

echo "#endif
" >> src/include/einit-modules/configuration.h

if test -e src/einit; then
	echo -n "cleaning the environment... "
	if make clean >/dev/null 2>&1; then
		echo "done";
	else
		echo "failed!";
	fi
fi

echo -n "creating dependency information... "
touch src/depend.mk
touch src/modules/depend.mk

if make depend > /dev/null; then
	echo "done";
else
	echo "failed!";
fi
