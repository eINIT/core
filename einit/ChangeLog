2006/06/03: mdeininger
 * [module.c] i accidentally had the configure() functions in modules called after
   the scanmodules() functions; this has been fixed
 * created some functions to search for block devices
 * there's one weird bug in the str*del() functions (or the mod() function) that
   seems to be able to cause a double-free

2006/05/31: mdeininger
 * temporary workaround for module groups that get cut down to a single module.

2006/05/28: mdeininger
 * updated concept configuration for automatic mounter
 * added a very basic gentoo ebuild

2006/05/27: mdeininger
 * that stuff about what's already being provided and what isn't needs to be reworked
 * added a placeholder file for a linux-specific filesystem mounter

2006/05/26: mdeininger
 * i implemented these "groups" during the last few days; it seems to work agreeably
   now (except for defining members in the configuration files)
 * just got reading group atoms from the configuration to work
 * there had been a bug in cfg_findnode

2006/05/23: mdeininger
 * had flawed logics in mod-daemon

2006/05/22: mdeininger
 * I was cleaning /var/run a tad too much...

2006/05/21: mdeininger
 * this darn piping still ain't working properly... i commented out the code for it

2006/05/19: mdeininger
 * relocated the pexec() function into its own c-file. might be useful to other
   modules as well.
 * added the prepare="" & cleanup="" attributes to mod-daemon and the uid= and
   gid= attributes to mod-daemon and mod-shell elements. they do what you'd expect
   them to, hopefully...
 * you can now manipulate environment variables in tty-entries

2006/05/18: mdeininger
 * The dependency calculations need a workover.
 * added the <include /> tag. use this to instruct einit to load other sub-
   configuration files.
 * tried a different approach at figuring out the end of the pipe in mod-exec.c

2006/05/15: mdeininger
 * Introduced two variables to control the edje feedback module.

2006/05/14: mdeininger
 * I created a logo for eINIT and a small website. + I started on an edje-theme.

2006/05/11: mdeininger
 * [module.c] fixed a bug that caused backup-modules and regular modules to be
   started in parallel; also did some cleanups
 * added einit-utmp-forger.c: a module to fake utmp entries (as they're quite
   useless to eINIT, but some programs depend on them)
 * added einit-efl-feedback-evas-edje.c: I always wanted to have my system boot
   visualised by e17 libraries, didn't you too?
   well, not that it was working, anyway :D

2006/05/10: mdeininger
 * [scheduler.c] replaced the spid and dead_orphans sets with linked lists
 * let's try a different approach... still using mutexes, but creating an extra
   thread from within the signal handler so that the signal handler can't dead-
   lock
 * this has definitely made the problem more scarce...
 * I found out that all these lockups were more than one problem combined. one of
   the last remaining bugs seems to be with the pipe that is to read the output
   of called commands from mod-exec... seems like sometimes either sh doesn't
   close the pipe or mod-exec seems to skip the eof... wicked... commenting out
   the pipe-section seems to stop the deadlock from occuring. (i stress-tested
   for about half an hour; it didn't crash so i suppose it works. now to figure
   out how this pipe-problem is to be fixed...)

2006/05/09: mdeininger
 * [vis-text.c] added ANSI color-codes to indicate success/failure
 * [tty.c] added a configuration flag to tell einit-tty whether or not to manage
   utmp records
 * stress-testing: there's this one very wicked bug in mod-exec... ><
 * and another one in mod-daemon

[2006/05/09: mdeininger: first public release, Version 0.01]

2006/05/09: mdeininger
 * the ipc() function will now try to unlink control-socket's file if it already
   exists. also it will chmod() the socket to the integer value specified in the
   <control-socket /> configuration option (yes, it's both a string and integer
   value at the same time. this is by design)
   we'll have to do some other security checks, although the chmod() method
   should work on linux if the socket is created by root and chmod()-ed to 0600.
 * created a new script to create release-tarballs: makerelease
 * extended the way you can define variables in your configuration file:
   attributes bi= and oi= can now be used to define "binary integers" and "octal
   integers"
 * i moved the ipc system to an external module. It just seems to be the clean
   thing to do.
 * the main thread is now the scheduler-thread

2006/05/08: mdeininger
 * mod-exec.c: you can now pass environment variables to pseudo-modules

2006/05/07: mdeininger
 * better (i.e. more complete) default configuration
 * fixed a bug with hashes.
 * been checking on some bugs with valgrind: no allocation errors left, only some
   memory leaks left

2006/05/06: mdeininger
 * bad bug! baaad stupid bug in scheduler

2006/05/04: mdeininger
 * fixes: some generic ones, some logics flaws, some in connection with uclibc
 * watchers are now spawned as a separate process
 * note: i just figured out that this still doesn't work with uclibc due to
   threading issues.
 * i found a race condition where the fork() calls would first let the new child
   do his thing, and then if it died before the main thread got his control back
   the sigchld would arrive before the sched_watch_pid() was called, thus making
   the scheduler ignore the watcher... using sleep(1); after forking is a cheap
   workaround, i really oughta find something better.
 * it seems that using SIGSTOP and SIGCONT is better a solution...
 * i just had a better idea, which involves the scheduler keeping track of dead
   "orphans"
 * laid out that documentation

2006/05/03: mdeininger
 * renamed power.c to einit-control.c
 * more ipc commands
 * i think i fixed the bug that caused new schedule entries to go amiss.
 * extra support for daemoni
 * ah, me silly, I forgot the install command in the modules Makefile

2006/05/02: mdeininger
 * whoops, forgot a library...
 * new subsystem: scheduler.[ch]
 * power off/reset should work now (on linux that is)
 * signal handlers are bitches >D
 * yet they work now... mostly; still gotta figure out how SIGINT is raised on
   ctrl+alt+del, although I'd guess its si_code should be SI_KERNEL...

2006/05/01: mdeininger
 * more enhancements to IPC

2006/04/30: mdeininger
 * new file: power.c
 * revamped Makefiles
 * some work on IPC

2006/04/27: mdeininger
 * spinlocks suck -- so we won't be using them anymore
 * okay, i just found out i've got a huge memory leak somewhere... damn ><
   maybe not that big after all, it appears that merely calling pthread_create
   increases einit's data size by 8m... weird

2006/04/26: mdeininger
 * added the --with-include= option to configure
 * removed the threading code for feedback. it really is useless.
 * introduced safe malloc/calloc/realloc/strdup functions
   (emalloc, ecalloc, erealloc, estrdup)
 * loading errors are now properly detected as such

2006/04/25: mdeininger
 * I think I fixed the race-condition problems in mod() with threading.
 * I was working a bit on that dependency-hell for disabling
 * yay, seems to work so far!

2006/04/24: mdeininger
 * almost there...
 * new function to delete dupes in string-sets (strsetdeldupes())
 * I think recursive dependencies work OK now (for task=MOD_ENABLE)
 * mod_plan_commit() works in parallel now (where applicable)

2006/04/23: mdeininger
 * fixes/changes for freebsd/darwin and mod_plan_ls()
 * one step closer to recursive dependencies

2006/04/21: mdeininger
 * renamed pl* and slist* functions to set_* ones. seems more logical...
 * introduced the macro status_update(): use this in your module whenever you
   want to tell einit that your status has changed.
   I think using threading just to do feedback-updates wasn't a good idea to
   begin with, I'll have to revise that... this macro allows me to do so easily.
 * mod_plan_restructure() -- it works... sorta, anyway
 * fixed configure to work with FreeBSD's sh

2006/04/20: mdeininger
 * sample configuration for ttys
 * mod() is now a little more verbose when no feedback-module has been enabled
   (in DEBUG-mode, that is)
 * added tty.c -- will be responsible for getting the tty lines up and running.
 * some changes to config-file parsing
 * ttys should work now.

2006/04/19: mdeininger
 * agh, typos
 * there's no need for the mod_configure()/mod_cleanup() functions anymore
 * mod-sysv.c can now actually *do* something :D (wait, that means I can
   actually start using this app soon... yays)
 * added mod-exec.c: for "pseudo-modules" that can be done in a handful of
   lines of script.
 * added a new parameter to cfg_findnode(): the thir parameter (base) tells
   cfg_findnode what node to start from (use NULL to start from the first one)
 * hey... things are finally working out :D

2006/04/18: mdeininger
 * changes to mod_plan*
 * removed everything deptree-related
 * fixed some logics flaw
 * introduced <prefer-* /> variables: use these to express user-preferences for
   certain modules (s="rid1:rid2:...")
 * removed the <feedback /> variable; it's redundant with the freshly-introduced
   <prefer- /> concept: <prefer-feedback s="" /> will do exactly the same, and
   a little more :D

2006/04/15: mdeininger
 * forgot some header-files

2006/04/13: mdeininger
 * did some cleanups
 * I had an idea about getting a plan of what to load/unload laid out...
 * [utility.[ch]] some generalisation to the functions that work with null-
   terminated arrays.

2006/04/06: mdeininger
 * some changes to the STATUS-constants
 * new utility-function: cfg_getpath(): looks for a string-type variable in the
   configuration-variables and returns it adding a slash at the end if necessary
 * re-implemented mod_enable() and mod_disable() as macros.
 * new debugging-function: mod_ls_deptree()
 * better check for the filetype in mod-sysv.c and module.c

2006/04/05: mdeininger
 * new feedback module: vis-curses.c: uses curses
 * feedback modules now need enable()/disable() functions
 * some minor enhancements to vis-text.c
 * [module.[ch]] mod_enable() and mod_disable() has been put together into one
   function: mod();

2006/04/04: mdeininger
 * the sf.net guys claimed CVS was going to be back online soon, so let's resume
   hacking...
 * [utility.[ch]] refinded some functions to work with string-sets.
 * changed all references to "dpl" to "slist" as this makes more sense.
 * added another parameter to cfg_findnode(): an int that you can use to specify
   node-flags that have to be set.

2006/03/30: mdeininger
 * [module.[ch]] I renamed the next/down members of mdeptree to left/right
 * [config.h, config-xml-expat.c] been working a little on getting the
   configuration read properly.
 * [main.c] new function: switchmode(): will switch mode (~runlevel)

2006/03/29: mdeininger
 * changed a little about how the variables get defined in the config file:
   it's now <variable-name stuff= />
   seems cleaner to me

2006/03/28: mdeininger
 * whoops, the license-statement in some files was fecked up
 * [utility.[ch]] str2dpl(): converts a string to a double-pointer-array
 * [utility.[ch]] strindpl(): check if a string is in a double-pointer-array
 * [module.c] mod_create_deptree(): finding candidates now works
 * in order to work on the module-dependency-tree things, we need some example-
   modules. let's see if we can make some up...
 * new directory: src/modules/linux: linux-specific modules
 * new source-file: src/modules/linux/linux-sysconf.c: linux-specific
   system-configuration should all be put in here.
 * [config-xml-expat.c] parsing is a little... "deeper" now with the possibility
   to specify "variables" in the configuration file using the syntax <var id= />
   and any of the attributes b= s= or i= (for a boolean, string or an integer-
   value respectively)

2006/03/27: mdeininger
 * aight, let's clean up some of the more confusing things about modules...
   specifically, load()/unload() should really be enable()/disable()

2006/03/26: mdeininger
 * [module.h, vis-text.c] new member to struct mfeedback
 * changes to the configure()-function's definition, it's now being checked for
   and there is also a cleanup() function

2006/03/25: mdeininger
 * [module.c] fixed some typos
 * pthreads is now a real dependency
 * $RDYNAMIC in config.mk and configure
 * dynamic linking with back-references is a friggen bitch...!
 * [module.[ch]] new function: mod_create_deptree()
 * [utility.[ch]] new source files for utility-functions
 * [module.[ch]] new function: mod_free_deptree()

2006/03/22: mdeininger
 * I was about to work on that threading for the comment-function, but -- of
   course -- I seem to be unable to complete this today due to... interruptions..
 * first successes with a watcher-type comment-thread!

2006/03/21: mdeininger
 * [dummy.c] dummy functions
 * [module.h] new struct mfeedback {}
 * interface changes

2006/03/12: mdeininger
 * [vis-text.c] been working a little on the comment()-function
 * fixed some typos
 * fixed a bug in mod-sysv.c that caused free()'d memory to be used

2006/03/11: mdeininger
 * changed some things about variable initialisation (guess I was being stupid earlier...)
 * [config.h] some restructuring...
 * [vis-text.c] textual feedback module
 * fixed module typing
 * [config.h, config-xml-expat.c] new interface-functions
 * [config-xml-expat.c] unknown nodes will now be saved in memory

2006/03/10: mdeininger
 * [mod-sysv.c] added load() and unload() prototypes
 * renamed mod_lsmod() and mod_addmod() to mod_ls() and mod_add()
 * [module.[ch]] added the mod_load() and mod_unload() functions

2006/03/08: mdeininger
 * [module.[ch]] mod_addmod (): changed some parameters;
 * new interface for module:scanmod() functions now includes a *mod_addmod()
 * [module.c] fixes in mod_freemodules();
 * [mod-sysv.c] loads init-scripts as pseudo-modules

2006/03/08: mdeininger
 * [main.c] removed the erroneous fsync() calls.
 * [module.[ch]] has a new function: mod_lsmod()
 * [mod-sysv.c] now adheres the DEBUG-flag

2006/03/07: mdeininger
 * [default.xml] adjusted the default path for modules
 * [configure] fixed a logics-flaw (make depend, then make clean)

2006/02/28: mdeininger
 * [configure] some more magic: will define POSIX/DARWIN depending on what sys you try to run it on
   * new option --enable-sysv: it's not activated by default now...
 * [sysv.c] moved to its own directory
 * general structural changes

2006/02/23: mdeininger
 * [module.c] made some output conditional
 * [bitch.c] yes, finally some bitchin'
 * [Makefile]s make install now works properly
 * [configure] the script accepts some parameters now: --debug, --prefix and --help

2006/02/20: mdeininger
 * started on mod-sysv.c (sysv compatibility)
 * working on that module-loader...

2006/02/18: mdeininger
 * more makefile magic *g*
 * figured out how to make this thing work on macs... well, I'm still being a heretic by naming the modules
   .so even on macs but hey... who cares about filenames, really? :D
 * made a very small configure script...

2006/02/16: mdeininger
 * more work on the module loader
  (particularly on the way modules identify themselves)

2006/02/14: mdeininger
 * been working on the module-loader
 * added a file that'll contain functions for error-reporting (bitch.c, along
   with bitch.h)

2006/02/13: mdeininger
 * some work on the xml-config-parser
 * restructured the default configuration file
 * added src/modules/dummy.c

2006/02/10: mdeininger
 * initial CVS import

2006/02/08: mdeininger
 * decided not to use autoconf, automake, libtool & gettext

2006/02/07: mdeininger
 * well, i was gonna do something today, but I was distracted a lot by work,
   so progress has only been marginal

2006/02/06: mdeininger
 * started working on this
 * main.c, module.c, config-xml-expat.c, module.h, config.h
 * started by creating a default configuration
