2006/09/10: mdeininger
 * added some code to allow for fsck'ing dirty filesystems (need to update
   metadata-reader to actually mark filesystems as dirty)
 * changed mount/local to mount/critical (mount/local should only be used for
   storage and other non-critical mounting actions)
 * minor fix (lots of inaccessible devices would be mounted in auto-fstab-mode)
 * reiserfs-metadata support
 * checks for dirty filesystems (ext2/3/reiserfs)
 * forgot some changes in the default configuration

2006/09/08: mdeininger
 * removed an unnecessary header file from einit-hostname.
 * changed some design parametres: encryption should be handled transparently
 * added mount/critical (to replace mount/local as a requirement for programs,
   since mount/local should rather mount the other things. that way, the
   system can start faster)

2006/09/07: mdeininger
 * added a function prototype to sort sets
 * some cleanups in common-mount.c
 * made sure deeper paths get mounted after lower paths. (i.e.: /usr/portage
   after /usr) it's probably way too slow, but hey, it works.
 * BUG: whenever einit tries to mount something without knowing the filesystem,
   things go weird.

2006/09/06: mdeininger
 * fixed a bug that caused some update steps to be skipped

2006/09/05: mdeininger
 * fixed a nasty bug in setcombine()
 * fixed the daemon definition for entrance -- it works again with the latest
   entrance from CVS
 * put the module planning logic into its own file: module-logic.c
 * added a new module that sets host- and domainname: einit-hostname.c

2006/09/03: mdeininger
 * combined the /dev, /proc and /sys mounting steps into "mount/system"
   (better for interoperability, theoretically at least)
 * the blockdevice- and metadata-scans performed by common-mount are now optional
 * vis-text can now be configured to automatically switch to a specified VT
   upon being enabled [linux only]
 * console messages don't clutter up tty1 anymore [sometimes, anyway]

2006/08/28: mdeininger
 * I tried to add NFS support today, but that's a real bitch it seems. for now,
   eINIT will pexec() /bin/mount to do all the dirty work with nfs.
 * common-mount now also keeps track of major/minor block device-numbers for
   added block devices (in order to (re-)construct missing device nodes)
 * the add_* functions now detect dupes
 * common-mount will now guess some entries of your fstab based on disk-labels

2006/08/20: mdeininger
 * fixed some memory allocation issues in the scheduler and einit-control
 * added an ipc function "modules ls_modules"
 * removed the mod_ls() function
 * some fixes in the module tsk planning logic
 * enabling/disabling modules using erc now works properly
 * changed the makefiles to accept ${DESTDIR} for gentoo
 * fixed the missing expat dependency in the gentoo ebuild

2006/08/19: mdeininger
 * changes to ./configure [need crosscompile support]

[2006/08/06: mdeininger: release, Version 0.02]

2006/08/06: mdeininger
 * trying to make the default textual visualiser better
 * the default visualiser now looks a lot cleaner
 * fixed some bugs with parallelism and memory management

2006/08/05: mdeininger
 * fixes for Darwin
 * fixes for Linux/x86_64
 * added console redirection support (for Linux)
 * optimised some portions of the module-loader code
 * fixes in common-mount.c: somehow directories and sockets seem to be related
   on Darwin...
 * implemented the disable() function in tty.c and added some code to allow for
   specifying which device a tty-command is to be run on (not tested)
 * some improvements in the module loader logic

2006/07/30: mdeininger
 * reworked cfgnodes to use the hash functions
 * fixed a bug in mod-daemon that caused a segfault due to resurrected
   daemoni lacking a pointer to their module.
 * the vis-text module will now redirect the std(in|out|err) files
 * pexec() and daemon_start() now use the stderr-fd for stdout
 * i have an idea how to fix some of the memory-leaks involving hashes...

2006/07/29: mdeininger
 * combined the update_* functions in common-mount.c into update()
   all called functions now get the &mcb pointer as their first argument

2006/07/26: mdeininger
 * feedback-system workover
 * the dummy module and mod-sysv.c are no longer being maintained and have been
   removed from the the repository
 * concept configuration for redirecting text input/output

2006/07/25: mdeininger
 * different handling for X-Sessions
 * fixes/improvements to mod-daemon and mod-exec [they now handle variables the
   same way as the tty-module]
 * improved mount-code [options]
 * some changes that'll be used for a workover of the feedback-system

2006/07/24: mdeininger
 * cleanups n stuff in mod-exec, mod-daemon and tty.
 * the <shell /> tag now allows you to specify a default environment for
   anything you'd wish to call.

2006/07/23: mdeininger
 * some changes to the str2set function.

2006/07/22: mdeininger
 * put the new setdup() function to use in config-xml-expat

2006/07/20: mdeininger
 * added a shell-type module to support swap-devices
 * some more changes that'll be needed for some changes in the set-type
  functions

2006/07/19: mdeininger
 * some fixes; some memory management improvements to keep the resident
   memory size smaller (at the expense of some CPU cycles)
 * started on some changes to the set-code

2006/07/18: mdeininger
 * added a control-block to the common-mount module to propagate to modules
   that rely on it.

2006/07/17: mdeininger
 * the mtab and fstab files get parsed completely now
 * the IPC commands "mount ls_fstab" and "mount ls_mtab" now work
 * unmounting should now actually be done (on Linux it even has backup-
   strategies if the device is still in use: umount->force-umount->remount r/o+
   detach)

2006/07/16: mdeininger
 * added a new flag to ./configure: --use-posix-regex
 * modified the find_block_devices_recurse_path() function to utilise regex-
   functions if configure was told to use these (added so that not all devices
   get scanned in the read-metadata step; on my box there's ~4000 block device-
   nodes before udev is up, which means there's lots of things being done that
   only waste cpu cycles)

2006/07/15: mdeininger
 * new functions to "register" functions for other modules to use (in event.h)
 * lotsa changes with the automounter (it now consists of more than just one
   module and makes use of the function_register/function_find system.
 * putting the SANDBOX-#define to better use

2006/07/12: mdeininger
 * updated default configuration (no real changes)

2006/07/11: mdeininger
 * did some preparations to incorporate the event system into the mount system.

2006/07/09: mdeininger
 sorry, don't get to much just now
 * added a new flag to ./configure

2006/06/25: mdeininger
 * added a "sandbox"-flag to configure: sets the prefix to `pwd`/sandbox and
   #defines SANDBOX
 * did some cleaning (I had already done this but... you know how sf.net CVS
   had some trouble)
 * I was thinking for a while, and now I'm pretty sure that einit needs some
   sort of event-system, so, I added that and made some "improvements" to the
   current IPC code.

2006/06/19: mdeininger
 whoops, my new playstation 2 seems to keep me fairly occupied... anyway, here
 goes:
 * i'm investigating some issues with mod-daemon that seem to prevent einit
   from shutting down properly; I think i fixed that bug.

2006/06/11: mdeininger
 * some more restructuring
 * need a list with filesystem capabilities, so I started on a new XML file
   that contains this information
 * internal fstab: added the before-mount, after-mount, before-umount, after-
   umount and manager attributes; they're pretty much self-explanatory
 * the mount/local step should work now
   NOTE: mount options are still being ignored. all of them. automatic device-
   to-mountpoint matching still doesn't work either. and still no processing of
   /etc/mtab, /proc/mounts or the legacy /etc/fstab.

2006/06/10: mdeininger
 * created the global variable osinfo that gets filled out via uname.
 * some work on the automounter
 * reading labels and uuid from ext2/3 filesystems works properly now.
   NOTE: these ext2 uuids are really weird, took me a while to figure out how
   they work...
 * first success: mounting the root filesystem with linux-mount worked just a
   second ago

2006/06/08: mdeininger
 * started moving some things from linux-mount to common-mount
 * added a bsd directory to contain bsd-specific modules.
 * new function: call_functions_in_set()

2006/06/07: mdeininger
 * created a file src/modules/common-mount.c to contain parts of the automounter
   that would be of interest to other implementations as well
 * moved pexec.h
 * moved some sources out of mod-daemon.c into dexec.[ch] just like i did with
   pexec.[ch] -- it could come in handy with the automounters.

2006/06/05: mdeininger
 * added some structs that should be able to hold all info the fstab provides
 * added default configuration for fstab

2006/06/04: mdeininger
 * [module.c] i accidentally had the configure() functions in modules called after
   the scanmodules() functions; this has been fixed
 * created some functions to search for block devices
 * there's one weird bug in the str*del() functions (or the mod() function) that
   seems to be able to cause a double-free

2006/05/31: mdeininger
 * temporary workaround for module groups that get cut down to a single module.

2006/05/28: mdeininger
 * updated concept configuration for automatic mounter
 * added a very basic gentoo ebuild

2006/05/27: mdeininger
 * that stuff about what's already being provided and what isn't needs to be reworked
 * added a placeholder file for a linux-specific filesystem mounter

2006/05/26: mdeininger
 * i implemented these "groups" during the last few days; it seems to work agreeably
   now (except for defining members in the configuration files)
 * just got reading group atoms from the configuration to work
 * there had been a bug in cfg_findnode

2006/05/23: mdeininger
 * had flawed logics in mod-daemon

2006/05/22: mdeininger
 * I was cleaning /var/run a tad too much...

2006/05/21: mdeininger
 * this darn piping still ain't working properly... i commented out the code for it

2006/05/19: mdeininger
 * relocated the pexec() function into its own c-file. might be useful to other
   modules as well.
 * added the prepare="" & cleanup="" attributes to mod-daemon and the uid= and
   gid= attributes to mod-daemon and mod-shell elements. they do what you'd expect
   them to, hopefully...
 * you can now manipulate environment variables in tty-entries

2006/05/18: mdeininger
 * The dependency calculations need a workover.
 * added the <include /> tag. use this to instruct einit to load other sub-
   configuration files.
 * tried a different approach at figuring out the end of the pipe in mod-exec.c

2006/05/15: mdeininger
 * Introduced two variables to control the edje feedback module.

2006/05/14: mdeininger
 * I created a logo for eINIT and a small website. + I started on an edje-theme.

2006/05/11: mdeininger
 * [module.c] fixed a bug that caused backup-modules and regular modules to be
   started in parallel; also did some cleanups
 * added einit-utmp-forger.c: a module to fake utmp entries (as they're quite
   useless to eINIT, but some programs depend on them)
 * added einit-efl-feedback-evas-edje.c: I always wanted to have my system boot
   visualised by e17 libraries, didn't you too?
   well, not that it was working, anyway :D

2006/05/10: mdeininger
 * [scheduler.c] replaced the spid and dead_orphans sets with linked lists
 * let's try a different approach... still using mutexes, but creating an extra
   thread from within the signal handler so that the signal handler can't dead-
   lock
 * this has definitely made the problem more scarce...
 * I found out that all these lockups were more than one problem combined. one of
   the last remaining bugs seems to be with the pipe that is to read the output
   of called commands from mod-exec... seems like sometimes either sh doesn't
   close the pipe or mod-exec seems to skip the eof... wicked... commenting out
   the pipe-section seems to stop the deadlock from occuring. (i stress-tested
   for about half an hour; it didn't crash so i suppose it works. now to figure
   out how this pipe-problem is to be fixed...)

2006/05/09: mdeininger
 * [vis-text.c] added ANSI color-codes to indicate success/failure
 * [tty.c] added a configuration flag to tell einit-tty whether or not to manage
   utmp records
 * stress-testing: there's this one very wicked bug in mod-exec... ><
 * and another one in mod-daemon

[2006/05/09: mdeininger: first public release, Version 0.01]

2006/05/09: mdeininger
 * the ipc() function will now try to unlink control-socket's file if it already
   exists. also it will chmod() the socket to the integer value specified in the
   <control-socket /> configuration option (yes, it's both a string and integer
   value at the same time. this is by design)
   we'll have to do some other security checks, although the chmod() method
   should work on linux if the socket is created by root and chmod()-ed to 0600.
 * created a new script to create release-tarballs: makerelease
 * extended the way you can define variables in your configuration file:
   attributes bi= and oi= can now be used to define "binary integers" and "octal
   integers"
 * i moved the ipc system to an external module. It just seems to be the clean
   thing to do.
 * the main thread is now the scheduler-thread

2006/05/08: mdeininger
 * mod-exec.c: you can now pass environment variables to pseudo-modules

2006/05/07: mdeininger
 * better (i.e. more complete) default configuration
 * fixed a bug with hashes.
 * been checking on some bugs with valgrind: no allocation errors left, only some
   memory leaks left

2006/05/06: mdeininger
 * bad bug! baaad stupid bug in scheduler

2006/05/04: mdeininger
 * fixes: some generic ones, some logics flaws, some in connection with uclibc
 * watchers are now spawned as a separate process
 * note: i just figured out that this still doesn't work with uclibc due to
   threading issues.
 * i found a race condition where the fork() calls would first let the new child
   do his thing, and then if it died before the main thread got his control back
   the sigchld would arrive before the sched_watch_pid() was called, thus making
   the scheduler ignore the watcher... using sleep(1); after forking is a cheap
   workaround, i really oughta find something better.
 * it seems that using SIGSTOP and SIGCONT is better a solution...
 * i just had a better idea, which involves the scheduler keeping track of dead
   "orphans"
 * laid out that documentation

2006/05/03: mdeininger
 * renamed power.c to einit-control.c
 * more ipc commands
 * i think i fixed the bug that caused new schedule entries to go amiss.
 * extra support for daemoni
 * ah, me silly, I forgot the install command in the modules Makefile

2006/05/02: mdeininger
 * whoops, forgot a library...
 * new subsystem: scheduler.[ch]
 * power off/reset should work now (on linux that is)
 * signal handlers are bitches >D
 * yet they work now... mostly; still gotta figure out how SIGINT is raised on
   ctrl+alt+del, although I'd guess its si_code should be SI_KERNEL...

2006/05/01: mdeininger
 * more enhancements to IPC

2006/04/30: mdeininger
 * new file: power.c
 * revamped Makefiles
 * some work on IPC

2006/04/27: mdeininger
 * spinlocks suck -- so we won't be using them anymore
 * okay, i just found out i've got a huge memory leak somewhere... damn ><
   maybe not that big after all, it appears that merely calling pthread_create
   increases einit's data size by 8m... weird

2006/04/26: mdeininger
 * added the --with-include= option to configure
 * removed the threading code for feedback. it really is useless.
 * introduced safe malloc/calloc/realloc/strdup functions
   (emalloc, ecalloc, erealloc, estrdup)
 * loading errors are now properly detected as such

2006/04/25: mdeininger
 * I think I fixed the race-condition problems in mod() with threading.
 * I was working a bit on that dependency-hell for disabling
 * yay, seems to work so far!

2006/04/24: mdeininger
 * almost there...
 * new function to delete dupes in string-sets (strsetdeldupes())
 * I think recursive dependencies work OK now (for task=MOD_ENABLE)
 * mod_plan_commit() works in parallel now (where applicable)

2006/04/23: mdeininger
 * fixes/changes for freebsd/darwin and mod_plan_ls()
 * one step closer to recursive dependencies

2006/04/21: mdeininger
 * renamed pl* and slist* functions to set_* ones. seems more logical...
 * introduced the macro status_update(): use this in your module whenever you
   want to tell einit that your status has changed.
   I think using threading just to do feedback-updates wasn't a good idea to
   begin with, I'll have to revise that... this macro allows me to do so easily.
 * mod_plan_restructure() -- it works... sorta, anyway
 * fixed configure to work with FreeBSD's sh

2006/04/20: mdeininger
 * sample configuration for ttys
 * mod() is now a little more verbose when no feedback-module has been enabled
   (in DEBUG-mode, that is)
 * added tty.c -- will be responsible for getting the tty lines up and running.
 * some changes to config-file parsing
 * ttys should work now.

2006/04/19: mdeininger
 * agh, typos
 * there's no need for the mod_configure()/mod_cleanup() functions anymore
 * mod-sysv.c can now actually *do* something :D (wait, that means I can
   actually start using this app soon... yays)
 * added mod-exec.c: for "pseudo-modules" that can be done in a handful of
   lines of script.
 * added a new parameter to cfg_findnode(): the thir parameter (base) tells
   cfg_findnode what node to start from (use NULL to start from the first one)
 * hey... things are finally working out :D

2006/04/18: mdeininger
 * changes to mod_plan*
 * removed everything deptree-related
 * fixed some logics flaw
 * introduced <prefer-* /> variables: use these to express user-preferences for
   certain modules (s="rid1:rid2:...")
 * removed the <feedback /> variable; it's redundant with the freshly-introduced
   <prefer- /> concept: <prefer-feedback s="" /> will do exactly the same, and
   a little more :D

2006/04/15: mdeininger
 * forgot some header-files

2006/04/13: mdeininger
 * did some cleanups
 * I had an idea about getting a plan of what to load/unload laid out...
 * [utility.[ch]] some generalisation to the functions that work with null-
   terminated arrays.

2006/04/06: mdeininger
 * some changes to the STATUS-constants
 * new utility-function: cfg_getpath(): looks for a string-type variable in the
   configuration-variables and returns it adding a slash at the end if necessary
 * re-implemented mod_enable() and mod_disable() as macros.
 * new debugging-function: mod_ls_deptree()
 * better check for the filetype in mod-sysv.c and module.c

2006/04/05: mdeininger
 * new feedback module: vis-curses.c: uses curses
 * feedback modules now need enable()/disable() functions
 * some minor enhancements to vis-text.c
 * [module.[ch]] mod_enable() and mod_disable() has been put together into one
   function: mod();

2006/04/04: mdeininger
 * the sf.net guys claimed CVS was going to be back online soon, so let's resume
   hacking...
 * [utility.[ch]] refinded some functions to work with string-sets.
 * changed all references to "dpl" to "slist" as this makes more sense.
 * added another parameter to cfg_findnode(): an int that you can use to specify
   node-flags that have to be set.

2006/03/30: mdeininger
 * [module.[ch]] I renamed the next/down members of mdeptree to left/right
 * [config.h, config-xml-expat.c] been working a little on getting the
   configuration read properly.
 * [main.c] new function: switchmode(): will switch mode (~runlevel)

2006/03/29: mdeininger
 * changed a little about how the variables get defined in the config file:
   it's now <variable-name stuff= />
   seems cleaner to me

2006/03/28: mdeininger
 * whoops, the license-statement in some files was fecked up
 * [utility.[ch]] str2dpl(): converts a string to a double-pointer-array
 * [utility.[ch]] strindpl(): check if a string is in a double-pointer-array
 * [module.c] mod_create_deptree(): finding candidates now works
 * in order to work on the module-dependency-tree things, we need some example-
   modules. let's see if we can make some up...
 * new directory: src/modules/linux: linux-specific modules
 * new source-file: src/modules/linux/linux-sysconf.c: linux-specific
   system-configuration should all be put in here.
 * [config-xml-expat.c] parsing is a little... "deeper" now with the possibility
   to specify "variables" in the configuration file using the syntax <var id= />
   and any of the attributes b= s= or i= (for a boolean, string or an integer-
   value respectively)

2006/03/27: mdeininger
 * aight, let's clean up some of the more confusing things about modules...
   specifically, load()/unload() should really be enable()/disable()

2006/03/26: mdeininger
 * [module.h, vis-text.c] new member to struct mfeedback
 * changes to the configure()-function's definition, it's now being checked for
   and there is also a cleanup() function

2006/03/25: mdeininger
 * [module.c] fixed some typos
 * pthreads is now a real dependency
 * $RDYNAMIC in config.mk and configure
 * dynamic linking with back-references is a friggen bitch...!
 * [module.[ch]] new function: mod_create_deptree()
 * [utility.[ch]] new source files for utility-functions
 * [module.[ch]] new function: mod_free_deptree()

2006/03/22: mdeininger
 * I was about to work on that threading for the comment-function, but -- of
   course -- I seem to be unable to complete this today due to... interruptions..
 * first successes with a watcher-type comment-thread!

2006/03/21: mdeininger
 * [dummy.c] dummy functions
 * [module.h] new struct mfeedback {}
 * interface changes

2006/03/12: mdeininger
 * [vis-text.c] been working a little on the comment()-function
 * fixed some typos
 * fixed a bug in mod-sysv.c that caused free()'d memory to be used

2006/03/11: mdeininger
 * changed some things about variable initialisation (guess I was being stupid earlier...)
 * [config.h] some restructuring...
 * [vis-text.c] textual feedback module
 * fixed module typing
 * [config.h, config-xml-expat.c] new interface-functions
 * [config-xml-expat.c] unknown nodes will now be saved in memory

2006/03/10: mdeininger
 * [mod-sysv.c] added load() and unload() prototypes
 * renamed mod_lsmod() and mod_addmod() to mod_ls() and mod_add()
 * [module.[ch]] added the mod_load() and mod_unload() functions

2006/03/08: mdeininger
 * [module.[ch]] mod_addmod (): changed some parameters;
 * new interface for module:scanmod() functions now includes a *mod_addmod()
 * [module.c] fixes in mod_freemodules();
 * [mod-sysv.c] loads init-scripts as pseudo-modules

2006/03/08: mdeininger
 * [main.c] removed the erroneous fsync() calls.
 * [module.[ch]] has a new function: mod_lsmod()
 * [mod-sysv.c] now adheres the DEBUG-flag

2006/03/07: mdeininger
 * [default.xml] adjusted the default path for modules
 * [configure] fixed a logics-flaw (make depend, then make clean)

2006/02/28: mdeininger
 * [configure] some more magic: will define POSIX/DARWIN depending on what sys you try to run it on
   * new option --enable-sysv: it's not activated by default now...
 * [sysv.c] moved to its own directory
 * general structural changes

2006/02/23: mdeininger
 * [module.c] made some output conditional
 * [bitch.c] yes, finally some bitchin'
 * [Makefile]s make install now works properly
 * [configure] the script accepts some parameters now: --debug, --prefix and --help

2006/02/20: mdeininger
 * started on mod-sysv.c (sysv compatibility)
 * working on that module-loader...

2006/02/18: mdeininger
 * more makefile magic *g*
 * figured out how to make this thing work on macs... well, I'm still being a heretic by naming the modules
   .so even on macs but hey... who cares about filenames, really? :D
 * made a very small configure script...

2006/02/16: mdeininger
 * more work on the module loader
  (particularly on the way modules identify themselves)

2006/02/14: mdeininger
 * been working on the module-loader
 * added a file that'll contain functions for error-reporting (bitch.c, along
   with bitch.h)

2006/02/13: mdeininger
 * some work on the xml-config-parser
 * restructured the default configuration file
 * added src/modules/dummy.c

2006/02/10: mdeininger
 * initial CVS import

2006/02/08: mdeininger
 * decided not to use autoconf, automake, libtool & gettext

2006/02/07: mdeininger
 * well, i was gonna do something today, but I was distracted a lot by work,
   so progress has only been marginal

2006/02/06: mdeininger
 * started working on this
 * main.c, module.c, config-xml-expat.c, module.h, config.h
 * started by creating a default configuration
