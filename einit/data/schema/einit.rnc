start = eINIT | Module | Network

eINIT = element einit {
  ( attribute prefix { "services-virtual-module" }? & ModuleContents* ) |

  ( attribute prefix { "configuration-services" }? & element * { attribute * { text }* }* ) |

  ( Core* &
    Configuration* &
    Services* &
    Special* )
}

Core = element core {
  element xml-validator { attribute command { text } }? &
  element settings {
    element xml-parser {
      element auto-create-missing-directories { BooleanAttribute }?
    }? &
    element configuration {
      element on-line-modifications { attribute save-to { text } }?
    }? &
    element modules {
      IDAttribute,
      PathAttributes
    }? &
    element configuration-path {
      StringAttribute
    }?
  }* &
  element scheduler {
    element shutdown-function-suffixes { StringAttribute }?
  }* &
  element module-logic {
    element init.d-path { StringAttribute }? &
    element maintain-init.d { StringAttribute, BooleanAttribute }?
  }* &
  element commands {
    element include {
      element file {
        StringAttribute
      }* & 
      element directory {
        PathAttributes
      }*
    }*
  }* &
  element mortality {
    element bad-malloc { IntegerAttribute }* &
    element bad-stdio { IntegerAttribute }* &
    element bad-regex { IntegerAttribute }* &
    element bad-expat { IntegerAttribute }* &
    element bad-dl { IntegerAttribute }* &
    element bad-lookup { IntegerAttribute }* &
    element bad-pthreads { IntegerAttribute }*
  }*
}

Configuration = element configuration {
  element system {
    element ctrl-alt-del { BooleanAttribute }* &
    element daemon-spawn-timeout { IntegerAttribute }* &
    element daemon-term-timeout-primary { IntegerAttribute }* &
    element daemon-term-timeout-secondary { IntegerAttribute }* &
    element shell { StringAttribute }* &
    element shell-exec-timeout { IntegerAttribute }* &
    element exec-envfile-base { StringAttribute }* &
    element proc-path { StringAttribute }* &
    element log { StringAttribute, BooleanAttribute }* &
    element kexec-to-reboot { BooleanAttribute }* &
    element kexec-calls {
      attribute load { text },
      attribute load-initrd { text },
      attribute execute { text }
    }*
  }* &

  element environment {
    element global { IDAttribute, StringAttribute }* &
    element safe { attribute * { text }* }?
  }* &

  element kernel {
    element modules {
      element autoload.d { attribute file { text } }?
    }*
  }* &

  Network* &

  element feedback {
    element visual {
      element std-io {
        attribute stdio { text },
        attribute stderr { text },
        attribute console { text },
        attribute activate-vt { text }?,
        attribute kernel-vt { text }?
      }? &

      element use-ansi-codes { BooleanAttribute }? &
      element shutdown-failure-timeout { IntegerAttribute }? &
      element broadcast-constraints { StringAttribute }? &
      element reset-shutdown-broadcast-messages { BooleanAttribute }? &
      element suppress-messages { BooleanAttribute }? &
      element suppress-status-notices { BooleanAttribute }? &

      element fbsplash {
        element ttys { StringAttribute }? &
        element theme { StringAttribute }? &
        element chain-feedback { StringAttribute }?
      }*
    }* &

    element aural {
      element tts {
        element synthesizer-command { StringAttribute }? &
        element vocalising-threshold { IntegerAttribute }?
      }*
    }*
  }* &

  element ipc {
    element control-socket { StringAttribute, IntegerAttribute }? &
    element chain-command { attribute for { text }, attribute do { text } }? &

    element dbus {
      element connection {
        attribute name { text },
        attribute address { text }
      }?
    }*
  }* &

  element command {
    element rmmod { CommandAttributes }? &
    element modprobe { CommandAttributes }? &
    element ip-flush { CommandAttributes }? &
    element create-bridge { CommandAttributes }?
  }*
}

Services = element services {
  element virtual {
    Module*
  }* &

  element alias {
    ( element * { attribute group { text }, attribute seq { "most" | "all" | "any" | "any-iop" } }*
    | ( IDAttribute, StringAttribute ))
  }* &

  element prefer {
    element * { StringAttribute }*
  }* &

  element override {
    element * { StringAttribute }*
  }*
}

Special = element special {
  element * { text }*
}

Boolean = "yes" | "no" | "true" | "false" | "enabled" | "disabled"

BooleanAttribute = attribute b { Boolean }
StringAttribute = attribute s { text }

IntegerAttribute = attribute i { text }

IDAttribute = attribute id { text }

PathAttributes = attribute path { text }, attribute pattern-allow { text }?, attribute pattern-disallow { text }?
CommandAttributes = attribute with-env { text }, StringAttribute?

include "einit-module.rnc"
include "einit-network.rnc"
