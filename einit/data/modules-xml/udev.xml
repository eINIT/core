<einit prefix="services-virtual-module">
 <shell id="shell-udev"
  name="udev - dynamic device management"
  provides="udev"
  requires="rootfs:sysfs:proc"
  enable="pexec-options dont-close-stdin;
	  echo &quot;feedback|notice|Mounting /dev for udev&quot;;
	  mount -n -t tmpfs -o exec,nosuid,mode=0755 udev /dev;
	  echo &quot;feedback|notice|Seeding /dev with needed nodes&quot;;
          [ ! -c /dev/console ] &amp;&amp; mknod /dev/console c 5 1;
          [ ! -c /dev/tty1 ] &amp;&amp; mknod /dev/tty1 c 4 1;
          [ ! -c /dev/null ] &amp;&amp; mknod /dev/null c 1 3;
          ln -snf /proc/self/fd /dev/fd;
          ln -snf fd/0 /dev/stdin;
          ln -snf fd/1 /dev/stdout;
          ln -snf fd/2 /dev/stderr;
          [ -e /proc/kcore ] &amp;&amp; ln -snf /proc/kcore /dev/core;
          mkdir -p /dev/pts /dev/shm;
          if [ -e /proc/sys/kernel/hotplug ]; then
      	   echo &quot;feedback|notice|Setting up proper hotplug agent&quot;;
           if [ $(uname -r | cut -f 3 -d . | cut -f 1 -d -) -gt 14 ]; then
   	    echo &quot;feedback|notice|Using netlink for hotplug events...&quot;;
            echo &quot;&quot; &gt; /proc/sys/kernel/hotplug;
           else
	    echo &quot;feedback|notice|Setting /sbin/udevsend as hotplug agent ...&quot;;
            echo &quot;/sbin/udevsend&quot; &gt; /proc/sys/kernel/hotplug;
           fi;
          fi;
	  echo &quot;feedback|notice|Generating udev rules to generate /dev/root symlink&quot;;
	  /lib/einit/scripts/write_devroot_rules;
	  echo &quot;feedback|notice|Starting udevd&quot;;
          udevd --daemon;
          touch /dev/.udev_populate;
          if [ $(uname -r | cut -f 3 -d . | cut -f 1 -d -) -gt 14 ]; then
	   echo &quot;feedback|notice|Populating /dev with existing devices through uevents&quot;;
           local opts=;
           [ &quot;${configuration_system_udev_coldplug}&quot; != &quot;yes&quot; ] &amp;&amp; opts=&quot;--attr-match=dev&quot;;
           udevtrigger ${opts};
          else
	   echo &quot;feedback|notice|Populating /dev with existing devices with udevstart&quot;;
           udevstart;
          fi;
	  echo &quot;feedback|notice|Letting udev process events&quot;;
          udevsettle --timeout=60;
          rm -f /dev/.udev_populate"
  disable="if [ &quot;${configuration_system_udev_device_tarball}&quot; = &quot;yes&quot; ]; then
	    echo &quot;feedback|notice|Saving device nodes&quot;;
            save_tmp_base=/tmp/udev.savedevices.&quot;$$&quot;;
            devices_udev=&quot;${save_tmp_base}&quot;/devices.udev;
            devices_real=&quot;${save_tmp_base}&quot;/devices.real;
            devices_totar=&quot;${save_tmp_base}&quot;/devices.totar;
            device_tarball=&quot;${save_tmp_base}&quot;/devices;
            rm -rf &quot;${save_tmp_base}&quot;;
            mkdir &quot;${save_tmp_base}&quot;;
            touch &quot;${devices_udev}&quot; &quot;${devices_real}&quot; &quot;${devices_totar}&quot; &quot;${device_tarball}&quot;;
            if [ -f ${devices_udev} ] &amp;&amp; [ -f ${devices_real} ] &amp;&amp; [ -f ${devices_totar} ] &amp;&amp; [ -f ${device_tarball} ]; then
             cd /dev;
             find . -xdev -type b -or -type c -or -type l | cut -d/ -f2- &gt; &quot;${devices_real}&quot;;
             udevinfo=$(udevinfo --export-db);
             echo &quot;${udevinfo}&quot; | gawk &#39;
                     /^(N|S):.+/ {
                             sub(/^(N|S):/, &quot;&quot;)
                             split($0, nodes)
                             for (x in nodes)
                                     print nodes[x]
                     }&#39; &gt; &quot;${devices_udev}&quot;
             for x in MAKEDEV core fd initctl pts shm stderr stdin stdout; do
              echo &quot;${x}&quot; &gt;&gt; &quot;${devices_udev}&quot;;
             done
             if [ -d /lib/udev/devices ]; then
              cd /lib/udev/devices;
              find . -xdev -type b -or -type c -or -type l | cut -d/ -f2- &gt;&gt; &quot;${devices_udev}&quot;;
             fi;
             cd /dev;
             fgrep -x -v -f &quot;${devices_udev}&quot; &lt; &quot;${devices_real}&quot; | grep -v ^\\.udev &gt; &quot;${devices_totar}&quot;;
             if [ -s ${devices_totar} ]; then
              tar --one-file-system --numeric-owner -jcpf &quot;${device_tarball}&quot; -T &quot;${devices_totar}&quot;;
              mv -f &quot;${device_tarball}&quot; /lib/udev/state/devices.tar.bz2;
             else
              rm -f /lib/udev/state/devices.tar.bz2;
             fi;
            else
	     echo &quot;feedback|warning|Could not create temporary files!&quot;;
            fi;
            rm -rf &quot;${save_tmp_base}&quot;;
           fi;
	   killall -9 udevd;
 	   echo &quot;feedback|notice|Shutdown successfull!&quot;;"
  variables="configuration-system-udev/.*" />
  restart="yes" />
</einit>
