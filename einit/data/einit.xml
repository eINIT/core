<?xml version="1.0" encoding="UTF-8" ?>
<einit>
 <core>
  <settings>
   <xml-parser>
    <auto-create-missing-directories b="true" />
   </xml-parser>
   <configuration>
    <if match="core-mode:sandbox">
     <on-line-modifications save-to="etc/einit/local/on-line-modifications.xml" />
     <else>
      <on-line-modifications save-to="/etc/einit/local/on-line-modifications.xml" />
     </else>
    </if>
   </configuration>
  </settings>
  <scheduler>
   <shutdown-function-suffixes s="linux" />
  </scheduler>

  <commands-include>
   <directory s="local" />
   <directory s="modules" />
  </commands-include>

  <settings>
<!-- example: use this to disable the compatibility modules -->
<!-- <modules path="/lib/einit/modules" pattern-allow=".*\.so" pattern-disallow="^compatibility.*" /> -->
   <modules path="/lib/einit/modules" pattern-allow=".*\.so" />
  </settings>

  <if match="core-mode:sandbox">
   <settings>
    <configuration-path s="etc/einit/" />
   </settings>
   <commands-include>
    <file s="sandbox.xml" />
    <file s="fstab.xml" />
    <directory s="../../lib/einit/modules-xml" />
    <directory s="../../lib/einit/modules-xml/network" />
    <directory s="../../lib/einit/modules-xml/templates-net" />
   </commands-include>
   <else>
    <settings>
     <configuration-path s="/etc/einit/" />
    </settings>
    <commands-include>
     <file s="local.xml" />
     <file s="fstab.xml" />
     <directory s="/lib/einit/modules-xml" />
     <directory s="/lib/einit/modules-xml/network" />
     <directory s="/lib/einit/modules-xml/templates-net" />
    </commands-include>
   </else>
  </if>

<!-- These settings control the "error correction" settings, i.e. how likely
     einit is to kill itself over a (potentially recoverable) problem.
     255 always means "kill yourself", 0 always means "ignore it". The values
     in between indicate different levels of actions, 1 should be "warn about
     it on stderr"
     Default is to print a warning and continue. Don't forget: if einit dies
     or exits for whatever reason, and it's being used as "the init" then most
     kernels will panic and your system will die, so setting most of these to
     255 is probably a very, very bad idea. -->
  <mortality>
   <bad-malloc i="1" />
   <bad-stdio i="1" />
   <bad-regex i="1" />
   <bad-expat i="1" />
   <bad-dl i="1" />
   <bad-lookup i="1" />
   <bad-pthreads i="1" />
  </mortality>
<!--  <mode s="init" /> -->
 </core>
 <configuration>
<!-- A note on the configuration variables in this file: If it appears in this file, and it also
   appears in local.xml (or whatever overlay you're loading), then the definition in local.xml
   will take preference (unless it's something where all entries are loaded, like fstab-nodes).
   i.e.: you do not need to modify the entries in both files, only the one in local.xml! -->
  <system>
   <ctrl-alt-del b="disabled" />
   <daemon-spawn-timeout i="20" />
   <daemon-term-timeout-primary i="10" />
   <daemon-term-timeout-secondary i="2" />
   <shell s="/bin/sh -c" />
   <shell-exec-timeout i="20" />
   <exec-envfile-base s="/etc/econf.d" />
   <proc-path s="/proc" />

   <swap device="-a" affinity="0" />
   <setfont font="lat2-12" ttys="1 2 3 4 5 6" />

   <sysctl>
    <file s="/etc/sysctl.conf" />
   </sysctl>

   <log b="true" s="/var/log/einit.log" />
  </system>

  <environment>
   <global id="PATH" s="/bin:/sbin:/usr/bin:/usr/sbin" />
   <global id="TERM" s="linux" />
   <safe PATH="/bin:/sbin:/usr/bin:/usr/sbin" TERM="dumb" />
  </environment>

  <kernel>
   <modules>
    <autoload.d file="/etc/modules.autoload.d/kernel-2.6" />
   </modules>
  </kernel>

  <network>
   <hostname s="localhost" />
   <domainname s="local" />

   <interfaces>
    <lo control="none" ip="iproute2" address="127.0.0.1/8" network="127.0.0.0/8" />
   </interfaces>

   <dhcp>
    <timeout s="60"/>
   </dhcp>
  </network>

  <peripherals>
   <keyboard layout="us" />
   <pointing-device>
    <gpm device="/dev/input/mice" type="ps2" />
   </pointing-device>
  </peripherals>

  <feedback>
   <visual>
    <std-io stdio="/dev/tty9" stderr="/dev/tty11" console="/dev/tty12" activate-vt="9" kernel-vt="12" />
<!-- better verbosity on tty10: -->
<!--    <std-io stdio="/dev/tty1" stderr="/dev/tty11" console="/dev/tty12" activate-vt="1" kernel-vt="12" verbose-output="/dev/tty10" /> -->
    <use-ansi-codes b="true" />
    <shutdown-failure-timeout i="3" />
    <broadcast-constraints s="/dev/(tty[1-8][12]?|pts/.*)" />
    <reset-shutdown-broadcast-messages b="true" />
<!-- set to true to get feedback on the current switch's status -->
    <calculate-switch-status b="false" />
    <fbsplash>
     <ttys s="1 2 3 4 5 6" />
     <theme s="gentoo" />
    </fbsplash>
   </visual>

   <visual-edje>
    <theme-path s="etc/einit/edje" />
    <theme-default s="einit.edj" />
    <theme-default-component s="einit/splash" />
   </visual-edje>

   <aural>
    <tts>
     <synthesizer-command s="/usr/bin/festival --tts --pipe" />
     <vocalising-threshold i="6" />
    </tts>
   </aural>
  </feedback>

  <ipc>
   <control-socket s="/dev/einit-control" i="0600" />
   <chain-command for="^update configuration.*" do="examine configuration" />
  </ipc>

  <audio>
   <alsa-mixer file="/etc/asound.state" />
  </audio>

  <bluetooth>
   <hidd options="" />
   <sobexsrv directory="/var/spool/sobexsrv"/>
  </bluetooth>

  <tty>
   <manage-utmp b="true" />

<!-- tty initialisation -->
   <tty1-regular dev="/dev/tty1" command="/sbin/agetty 38400 tty1" restart="yes" />
   <tty2-regular dev="/dev/tty2" command="/sbin/agetty 38400 tty2" restart="yes" />
   <tty3-regular dev="/dev/tty3" command="/sbin/agetty 38400 tty3" restart="yes" />
   <tty4-regular dev="/dev/tty4" command="/sbin/agetty 38400 tty4" restart="yes" />
   <tty5-regular dev="/dev/tty5" command="/sbin/agetty 38400 tty5" restart="yes" />
   <tty6-regular dev="/dev/tty6" command="/sbin/agetty 38400 tty6" restart="yes" />

   <tty-panic dev="/dev/tty8" command="/sbin/agetty 38400 tty8" restart="yes" PANIC="yes" />
  </tty>

  <video>
   <intel>
    <resolution x="1280" y="1024" bpp="32" mode="5c" />
   </intel>
  </video>

<!-- not much of this is implemented, yet -->
  <compatibility>
   <sysv utmp="yes" wtmp="yes">
    <simulate-runlevel now="3" />
    <if match="core-mode:sandbox">
     <initctl s="etc/.initctl" i="0600" />
     <else>
      <initctl s="/dev/initctl" i="0600" />
     </else>
    </if>

<!-- this variable is used to bind runlevels to einit modes -->
    <runlevel-mode-relations runlevel0="power-down" runlevel1="single" runlevel2="default" runlevel3="default" runlevel4="default" runlevel5="default" runlevel6="power-reset" runlevelS="single" runlevels="single" />
   </sysv>

<!-- not yet implemented
   <initng>
    <i-files s="/etc/initng" />
    <transformations>
    </transformations>
   </initng>

   <upstart />
   <jinit />
   <cinit />
   <launchd />
   <bsd /> -->
  </compatibility>

<!-- mount settings -->
  <storage>
   <update-steps s="block-devices:metadata" />
   <mtab-source s="legacy" />
   <maintain-mtab b="yes" s="/etc/mtab" />
   <filesystem>
    <label-readers s="linux" />
    <guessing-order s="ext4:ext3:ext2:reiser4:reiserfs:xfs:jfs:ufs:udf" />
   </filesystem>
   <mountpoints>
    <no-umount s="/dev:/proc:/sys" />
    <critical s="/usr:/var" />
   </mountpoints>
<!-- parametre 1 is the filesystem type, parametre 2 is the device -->
   <fsck-command s="pexec-options no-pipe; /sbin/fsck -a -T -t %1$s %2$s" />

   <block-devices>
    <dev-constraints s="/dev/([shm]d[a-z]?[0-9]*)" />
    <source s="dev" />
   </block-devices>

  </storage>

  <command>
<!-- the command to run to remove a module from the kernel -->
   <rmmod s="/sbin/modprobe -r" with-env="/sbin/modprobe -r ${module}" />
   <modprobe s="/sbin/modprobe" with-env="/sbin/modprobe ${module}" />
  </command>

  <program-options>
   <cpufreq-governor s="ondemand" />
   <cpufreq-cpus s="0 1" />
   <hwclock s="--utc" />
  </program-options>

  <distccd listen="0.0.0.0" allow="192.168.0.0/24" port="3632" nice="15" />
 </configuration>

 <information>
  <filesystem>
<!-- all-purpose filesystems -->
   <type id="ext2" flags="rw" />
   <type id="ext3" flags="rw" />
   <type id="reiserfs" flags="rw" />
   <type id="reiser4" flags="rw" />
   <type id="xfs" flags="rw" />
   <type id="jfs" flags="rw" />

<!-- special-purpose filesystems -->
   <type id="tmpfs" flags="volatile:rw" />
   <type id="squashfs" />
   <type id="romfs" />
   <type id="cramfs" />

<!-- network filesystems -->
   <type id="nfs" flags="network" />

<!-- dos-ish filesystems -->
   <type id="vfat" flags="rw" />
   <type id="ntfs" />

<!-- popular on cd/dvd media -->
   <type id="iso9660" />
   <type id="udf" flags="rw" />

<!-- internal-use filesystems -->
   <type id="unionfs" />
   <type id="proc" flags="rw:volatile" />
   <type id="sysfs" flags="rw:volatile" />
  </filesystem>
 </information>

 <services>
  <virtual>
   <module>
<!-- modules -->
    <shell-template id="template-shell-kern-module-loader"
     name="Kernel Modules (${system})"
     provides="kern-${system}"
     requires="mount-system:ipc"
     enable="
      for x in ${configuration_kernel_modules_${system}};
       do echo $x; modprobe $x &amp;
      done; /bin/true"
     disable="
      for x in ${configuration_kernel_modules_${system}}; do
       ${configuration_command_rmmod} $x &amp;
      done; /bin/true"
     variables="configuration-kernel-modules-${system}:configuration-command-rmmod" />

    <shell id="shell-kern-ethernet"
     based-on-template="template-shell-kern-module-loader"
     disable="/bin/true"
     system="ethernet" />
    <shell id="shell-kern-sound"
     based-on-template="template-shell-kern-module-loader"
     provides="kern-sound:kern-alsa"
     disable="/bin/true"
     system="sound" />
    <shell id="shell-kern-dvb"
     based-on-template="template-shell-kern-module-loader"
     system="dvb" />
    <shell id="shell-kern-arbitrary"
     based-on-template="template-shell-kern-module-loader"
     disable="/bin/true"
     system="arbitrary" />
    <shell id="shell-kern-usb"
     based-on-template="template-shell-kern-module-loader"
     system="usb" />
    <shell id="shell-kern-hid"
     based-on-template="template-shell-kern-module-loader"
     system="hid" />
    <shell id="shell-kern-bluetooth"
     based-on-template="template-shell-kern-module-loader"
     system="bluetooth" />

    <shell id="shell-kern-module-autoload.d"
     name="Kernel Modules (autoload.d)"
     provides="kern-arbitrary"
     requires="mount-system:ipc"
     enable="
      if test -e ${configuration_kernel_modules_autoload_d_file}; then
       modules=`grep -E '^\s*\w+' ${configuration_kernel_modules_autoload_d_file}`;
       for x in ${modules};
        do echo $x; modprobe $x &amp;
       done; /bin/true;
      else
       /bin/false;
      fi;"
     disable="
      if test -e ${configuration_kernel_modules_autoload_d_file}; then
       modules=`grep -E '^\s*\w+' ${configuration_kernel_modules_autoload_d_file}`;
       for x in ${modules}; do
        ${configuration_command_rmmod} $x &amp;
       done; /bin/true;
      else
       /bin/false;
      fi;"
     variables="configuration-kernel-modules-autoload.d/file:configuration-command-rmmod" />

    <shell id="shell-kern-audio-alsa"
     name="Kernel Modules (ALSA)"
     provides="kern-alsa"
     requires="mount-system"
     enable="
      kernel_modules_alsa=`/sbin/modprobe -c|grep -E '(snd-card|sound-service)-[0-9]'|awk '{print $3}'`;

      if [[ -z '${kernel_modules_alsa}' &amp;&amp; ! ( -d /proc/asound &amp;&amp; -z &quot;$(grep ' no soundcards ' /proc/asound/cards)&quot; ) ]] ; then
       echo 'feedback|warning|Looks like you did not customise your alsa installation...';
       kernel_modules_alsa=$(modprobe -c | grep pci: |  awk '{ print $3 }' | grep snd.* | sort | uniq);
       if test -z '${kernel_modules_alsa}'; then
        echo 'feedback|warning|I cannot seem to figure out your alsa modules...';
       fi;
      fi;

      for x in ${kernel_modules_alsa};
       do echo $x; modprobe $x;
      done; /bin/true"
     disable="
      kernel_modules_alsa=`cat /proc/asound/modules|awk '{print $2}'`;
      for x in ${kernel_modules_alsa}; do
       ${configuration_command_rmmod} $x;
      done;
      /bin/true"
     variables="configuration-command-rmmod" />

<!-- nvidia -->
<!-- this would normally only load the module, but somehow uevents seem not to work properly
 with this one... *shrugs* might be an old driver of mine -->
    <shell id="shell-kern-nvidia"
     name="Proprietary NVIDIA X11 Drivers"
     provides="kern-nvidia"
     requires="mount-system"
     enable="modprobe nvidia;
      for i in 0 1 2 3 4 5 6 7; do
       mknod /dev/nvidia$i c 195 $i;
      done;
      mknod /dev/nvidiactl c 195 255;
      chgrp video /dev/nvidia*;
      chmod 0660 /dev/nvidia*;
      /bin/true;"
     disable="${configuration_command_rmmod} nvidia;
      rm /dev/nvidia*"
     variables="configuration-command-rmmod" />

<!-- no guarantee on this one, just wrote what i remember should be working -->
    <shell id="shell-kern-ati"
     name="Proprietary ATI X11 Drivers"
     provides="kern-ati"
     requires="mount-system"
     enable="modprobe fglrx"
     disable="${configuration_command_rmmod} fglrx"
     variables="configuration-command-rmmod" />

<!-- new template for wpa_supplicant - go ryan! :D -->
    <shell-template id="template-shell-net-wpasupplicant"
     name="Network (${interface}, wpa_supplicant)"
     provides="net-${interface}"
     requires="modules"
     enable="wpa_supplicant -D ${configuration_network_interfaces_${interface}_driver} -i ${interface} -c ${configuration_network_interfaces_${interface}_config} -Bw;
      wpa_cli -B -i ${interface}"
     disable="ifconfig ${interface} down"
     variables="configuration-network-interfaces-${interface}/.*" />

<!-- another hooray for haader, who contributed this module definition.
    this should (in theory) work for his Atheros WLAN NIC. I slightly modified it to pass the SSID
    as a varialble, just like he wanted. -->
    <shell id="shell-net-ath0"
     name="Network (Wireless, Atheros)"
     requires="mount-system"
     provides="net-ath0"
     pid="/var/run/dhcpcd-ath0.pid"
     enable="pexec-options no-pipe;
             /sbin/modprobe ${configuration_kernel_module_ath0} ;
             /sbin/wlanconfig ath0 create wlandev wifi0 wlanmode sta ;
             /sbin/iwconfig ath0 essid ${configuration_network_wireless_ssid} ;
             /sbin/iwpriv ath0 mode 3 ;
             /sbin/wpa_supplicant -Dmadwifi -c/etc/wpa_supplicant.conf -W -B -iath0 -P/var/run/wpa_supplicant-ath0.pid ;
             /bin/wpa_cli -iath0 -B ;
             dhcpcd ath0 ;
             /sbin/ifconfig ath0 ; "
     disable="${configuration_command_rmmod} ${configuration_kernel_module_ath0}"
     variables="configuration-kernel-module-ath0:configuration-network-wireless-ssid:configuration-command-rmmod" />

    <shell id="shell-apache2"
     name="httpd - Apache Hypertext Transfer Protocol Server"
     provides="apache2"
     requires="mount-critical:net-lo"
     pid="/var/run/apache2.pid"
     opts="-D DEFAULT_VHOST"
     root="/usr/lib/apache2"
     config="/etc/apache2/httpd.conf"
     prepare="[ ! -e /var/log/apache2 ] &amp;&amp; mkdir /var/log/apache2;
              [ -f /var/log/apache2/ssl_scache ] &amp;&amp; rm /var/log/apache2/ssl_scache;
              /bin/true;"
     enable="pexec-options no-pipe; apache2 ${opts} -d ${root} -f ${config} -k start&amp;"
     disable="killall -9 -q apache2"
     restart="yes" />

<!-- this one's the version as modified by jvale to suit gentoo's environment -->
    <shell id="shell-apache2-gentoo"
     name="httpd - Apache Hypertext Transfer Protocol Server"
     provides="apache2"
     requires="mount-critical:net-lo"
     pid="/var/run/apache2.pid"
     envfile="/etc/conf.d/apache2"
     root="/usr/lib/apache2"
     config="/etc/apache2/httpd.conf"
     prepare="[ ! -e /var/log/apache2 ] &amp;&amp; mkdir /var/log/apache2;
              [ -f /var/log/apache2/ssl_scache ] &amp;&amp; rm /var/log/apache2/ssl_scache;
              /bin/true"
     enable="pexec-options no-pipe; apache2 $APACHE2_OPTS -d ${root} -f ${config} -k start&amp;"
     disable="killall -9 -q apache2"
     restart="yes" />

   </module>
  </virtual>
  <prefer>
   <mount-system s="daemon-udev" />
   <kern-alsa s="shell-kern-audio-alsa" />
   <feedback s="feedback-visual-textual" />
  </prefer>
 </services>

 <mode id="boot">
  <enable services="sysconf:mount-local:hostname:tty:keyboard:ipc:logger:network:dbus:hal:utmp:initctl" critical="mount-critical:tty" />
  <ttys s="tty1-regular" />
  <auto-add-feedback b="true" />
 </mode>
 <mode id="default" base="boot">
  <enable services="audio:portmap:clock:displaymanager:swap:mount-remote" />
  <ttys s="tty1-regular:tty2-regular:tty3-regular:tty4-regular:tty5-regular:tty6-regular" />
 </mode>
 <mode id="power-down">
  <disable services="all-but-feedback" />
  <ttys s="none" />
  <before-switch emit-event="power/mps-down-scheduled" ipc="save configuration" />
<!--  <after-switch emit-event="power/mps-down-imminent" ipc="exec /etc/init.d/halt.sh;scheduler power-down" /> -->
  <after-switch emit-event="power/mps-down-imminent" ipc="scheduler power-down" />
 </mode>
 <mode id="power-reset" base="power-down">
  <ttys s="none" />
  <before-switch emit-event="power/reset-scheduled" ipc="save configuration" />
<!--  <after-switch emit-event="power/reset-imminent" ipc="exec /etc/init.d/halt.sh;scheduler power-reset" /> -->
  <after-switch emit-event="power/reset-imminent" ipc="scheduler power-reset" />
 </mode>
</einit>
