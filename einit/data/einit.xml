<?xml version="1.0" encoding="UTF-8" ?>
<einit>
 <core>
  <settings>
   <module>
<!-- use this to disable the compatibility modules -->
<!-- <load pattern-allow=".*\.so" pattern-disallow="^compatibility.*" /> -->
    <load pattern-allow=".*\.so" />
   </module>
  </settings>
  <scheduler>
   <shutdown-function-suffixes s="linux" />
  </scheduler>

  <if match="core-mode:sandbox">
   <settings>
    <module-path s="lib/einit" />
    <configuration-path s="etc/einit/" />
   </settings>
   <commands-include-file s="sandbox.xml" />
   <else>
    <settings>
     <module-path s="/lib/einit" />
     <configuration-path s="/etc/einit/" />
    </settings>
    <commands-include-file s="local.xml" />
   </else>
  </if>
<!-- with the current configuration files, this is not required, but you could still use it
  <commands>
   <include>
    <file s="local.xml" />
    <directory s="local" />
   </include>
  </commands> -->

<!--  <mode s="init" /> -->
 </core>

 <configuration>
<!-- A note on the configuration variables in this file: If it appears in this file, and it also
   appears in local.xml (or whatever overlay you're loading), then the definition in local.xml
   will take preference (unless it's something where all entries are loaded, like fstab-nodes).
   i.e.: you do not need to modify the entries in both files, only the one in local.xml! -->
  <system>
   <ctrl-alt-del b="disabled" />
   <daemon-spawn-timeout i="20" />
   <daemon-term-timeout-primary i="10" />
   <daemon-term-timeout-secondary i="2" />
   <shell s="/bin/sh -c" />
   <shell-exec-timeout i="20" />
   <proc-path s="/proc" />
  </system>

  <environment>
   <global id="PATH" s="/bin:/sbin:/usr/bin:/usr/sbin" />
   <global id="TERM" s="linux" />
   <safe PATH="/bin:/sbin:/usr/bin:/usr/sbin" TERM="dumb" />
  </environment>

  <network>
   <hostname s="localhost" />
   <domainname s="local" />

   <interfaces>
    <source s="sys:proc" />
    <lo address="127.0.0.1/8" network="127.0.0.0/8" gateway="127.0.0.1" />
   </interfaces>

   <dhcp>
    <timeout s="60"/>
   </dhcp>
  </network>

  <peripherals>
   <keyboard layout="us" />
   <pointing-device>
    <gpm device="/dev/input/mice" type="ps2" />
   </pointing-device>
  </peripherals>

  <feedback>
   <visual>
    <std-io stdin="/dev/tty1" stdout="/dev/tty1" stderr="/dev/tty11" console="/dev/tty12" activate-vt="1" kernel-vt="12" verbose-output="/dev/tty10" />
    <use-ansi-codes b="true" />
    <shutdown-failure-timeout i="15" />
    <broadcast-constraints s="/dev/(tty[1-9][12]?|pts/.*)" />
    <reset-shutdown-broadcast-messages b="true" />

    <fbsplash>
     <splash-util s="/sbin/splash_util" />
    </fbsplash>
   </visual>

   <visual-edje>
    <theme-path s="etc/einit/edje" />
    <theme-default s="einit.edj" />
    <theme-default-component s="einit/splash" />
   </visual-edje>

   <aural>
    <tts>
     <synthesizer-command s="/usr/bin/festival --tts --pipe" />
     <vocalising-threshold i="6" />
    </tts>
   </aural>
  </feedback>

  <ipc>
   <control-socket s="/etc/einit-control" i="0600" />
  </ipc>

  <audio>
   <alsa-mixer file="/etc/asound.state" />
  </audio>

  <bluetooth>
   <hidd options="" />
  </bluetooth>

  <tty>
   <manage-utmp b="true" />

<!-- tty initialisation -->
   <tty1-regular dev="/dev/tty1" command="/sbin/agetty 38400 tty1" restart="yes" />
   <tty2-regular dev="/dev/tty2" command="/sbin/agetty 38400 tty2" restart="yes" />
   <tty3-regular dev="/dev/tty3" command="/sbin/agetty 38400 tty3" restart="yes" />
   <tty4-regular dev="/dev/tty4" command="/sbin/agetty 38400 tty4" restart="yes" />
   <tty5-regular dev="/dev/tty5" command="/sbin/agetty 38400 tty5" restart="yes" />
   <tty6-regular dev="/dev/tty6" command="/sbin/agetty 38400 tty6" restart="yes" />

   <tty-panic dev="/dev/tty8" command="/sbin/agetty 38400 tty8" restart="yes" PANIC="yes" />
  </tty>

  <video>
   <intel>
    <resolution x="1280" y="1024" bpp="32" mode="5c" />
   </intel>
  </video>

<!-- not much of this is implemented, yet -->
  <compatibility>
   <sysv utmp="yes" wtmp="yes">
<!--    <simulate-runlevel before="0" now="3" /> -->
<!--    <simulate-runlevel before="0" now="e" /> -->
    <simulate-runlevel now="3" />
    <distribution s="auto">
     <gentoo>
<!-- in case you wish to use gentoo-ish init.d scripts, use this:
     NOTE: this should only be used with gentoo-ish init.d scripts, as they need special treatment -->
<!--      <init.d path="/etc/init.d/" />
      <runlevels path="/etc/runlevels" exclusive="false" /> -->
      <parse-env.d b="true" />
      <service-tracker b="true" path="/var/lib/init.d" />

<!-- scriptlets to process gentoo's init.d scripts
     ( i don't particularly feel like re-implementing a complete sh right now )
     arguments: script-path, script-name, action -->
      <init.d-scriptlets
       list-dependencies='
        need () { echo "need="$@; };
        use () { echo "use="$@; };
        provide () { echo "provide="$@; };
        before () { echo "before="$@; };
        after () { echo "after="$@; };
        depend () { echo "need=mount/local"; };

        if test -e /etc/conf.d/${script-name}; then source /etc/conf.d/${script-name}; fi;
        source ${script-path};

        depend;'
       execute='
        ewarn () { echo "feedback|warning|"$@; };
        eerror () { echo "feedback|warning|"$@; };
        ebegin () { echo "feedback|notice|"$@; };
        einfo () { echo "feedback|notice|"$@; };
        eend () {
         if test $1 = 0; then
          echo "feedback|success|$2";
         else
          echo "feedback|failure|$2";
         fi; };
        if test -e /etc/conf.d/${script-name}; then source /etc/conf.d/${script-name}; fi;
        source ${script-path};
        ${action};' />
     </gentoo>
    </distribution>
<!-- in case you wish to use init.d scripts, use this:
     NOTE: this does NOT work with gentoo's init.d scripts! -->
<!--    <init.d path="/etc/init.d/" process-rc.d="yes" /> -->

    <if match="core-mode:sandbox">
     <initctl s="etc/.initctl" i="0600" />
     <else>
      <initctl s="/dev/initctl" i="0600" />
     </else>
    </if>

<!-- this variable is used to bind runlevels to einit modes -->
    <runlevel-mode-relations runlevel0="power-down" runlevel1="single" runlevel2="default" runlevel3="default" runlevel4="default" runlevel5="default" runlevel6="power-reset" runlevelS="single" runlevels="single" />
   </sysv>

<!-- not yet implemented
   <initng>
    <i-files s="/etc/initng" />
    <transformations>
    </transformations>
   </initng>

   <upstart />
   <jinit />
   <cinit />
   <launchd />
   <bsd /> -->
  </compatibility>

  <secondary>
   <!-- sh-imports for gentoo systems -->

   <if file-exists="/etc/gentoo-release">
    <file-sh id="/etc/conf.d/hostname" configuration-network-hostname="HOSTNAME:s" />
    <file-sh id="/etc/conf.d/keymaps" configuration-peripherals-keyboard="KEYMAP:layout" />
<!-- this does not (yet) work as expected:
    <file-sh id="/etc/conf.d/clock" configuration-program-options-hwclock="CLOCK:s" /> -->
   </if>
  </secondary>

<!-- mount settings -->
  <storage>
   <update-steps s="block-devices:metadata" />
   <mtab-source s="legacy" />
   <maintain-mtab b="yes" s="/etc/mtab" />
   <filesystem>
    <label-readers s="linux" />
    <guessing-order s="ext4:ext3:ext2:reiser4:reiserfs:xfs:jfs:ufs:udf" />
   </filesystem>
   <mountpoints>
    <no-umount s="/dev:/proc:/sys" />
    <critical s="/usr:/var" />
   </mountpoints>
<!-- parametre 1 is the filesystem type, parametre 2 is the device -->
   <fsck-command s="/sbin/fsck -a -T -t %1$s %2$s" />

   <block-devices>
    <dev-constraints s="/dev/([shm]d[a-z]?[0-9]*)" />
    <source s="dev" />
   </block-devices>

   <fstab>
<!-- NEVER remove the configuration fstab-source! -->
    <source s="configuration" />

<!-- you'll probably need to leave these as they are, einit needs them to boot properly -->
<!-- things got a little more complicated with udev lately... -->
    <node mountpoint="/dev" fs="tmpfs"
     manager="/sbin/udevd"
     after-mount='
      echo "feedback|notice|seeding /dev";
      if test -d /lib/udev/devices; then cp -a /lib/udev/devices/* /dev; fi;
      ln -snf /proc/self/fd /dev/fd;
      ln -snf fd/0 /dev/stdin;
      ln -snf fd/1 /dev/stdout;
      ln -snf fd/2 /dev/stderr;
      if test -e /proc/kcore; then ln -snf /proc/kcore /dev/core; fi;

      if test ! -e /dev/console; then mknod /dev/console c 5 1 -m 0600; fi;

      echo "feedback|notice|creating device nodes";
      /sbin/udevstart&lt;/dev/console;' />
    <node mountpoint="/sys" fs="sysfs" />
    <node mountpoint="/proc" fs="proc" />

    <node id="usbfs-mount-node" mountpoint="/proc/bus/usb" fs="usbfs" options="critical" />
    <node mountpoint="/dev/shm" fs="tmpfs" device="shm" before-mount="mkdir -p /dev/shm" options="critical" />
    <node mountpoint="/dev/pts" fs="devpts" before-mount="mkdir -p /dev/pts" options="critical" />
   </fstab>
  </storage>

  <command>
<!-- the command to run to remove a module from the kernel -->
   <rmmod s="/sbin/rmmod" />
  </command>

  <program-options>
   <cpufreq-governor s="ondemand" />
   <cpufreq-cpus s="0 1" />
   <hwclock s="--utc" />
  </program-options>
 </configuration>

 <information>
  <filesystem>
<!-- all-purpose filesystems -->
   <type id="ext2" flags="rw" />
   <type id="ext3" flags="rw" />
   <type id="reiserfs" flags="rw" />
   <type id="reiser4" flags="rw" />
   <type id="xfs" flags="rw" />
   <type id="jfs" flags="rw" />

<!-- special-purpose filesystems -->
   <type id="tmpfs" flags="volatile:rw" />
   <type id="squashfs" />
   <type id="romfs" />
   <type id="cramfs" />

<!-- network filesystems -->
   <type id="nfs" flags="network" />

<!-- dos-ish filesystems -->
   <type id="vfat" flags="rw" />
   <type id="ntfs" />

<!-- popular on cd/dvd media -->
   <type id="iso9660" />
   <type id="udf" flags="rw" />

<!-- internal-use filesystems -->
   <type id="unionfs" />
   <type id="proc" flags="rw:volatile" />
   <type id="sysfs" flags="rw:volatile" />
  </filesystem>
 </information>

 <services>
  <virtual>
   <module>
<!-- you can define daemoni like this -->
    <daemon id="daemon-apmd"
     name="APMd"
     provides="apmd"
     requires="mount/critical"
     command="/usr/sbin/apmd"
     restart="yes" />

<!-- modified version of the gpm module by teppic from the wiki -->
<!-- as has been suggested by him, i have modified this to use variables, hope it works... -->
    <shell id="shell-gpm"
     name="Console mouse services (GPM)"
     provides="gpm"
     requires="tty"
     enable="/usr/sbin/gpm -m ${configuration_peripherals_pointing_device_gpm_device} -t ${configuration_peripherals_pointing_device_gpm_type}"
     disable="killall gpm"
     restart="yes"
     vairables="configuration-peripherals-pointing-device-gpm/.*" />

<!-- new DBUS module -->
    <daemon id="daemon-dbus"
     name="D-BUS system messagebus"
     provides="dbus"
     requires="mount/critical"
     command="rm -rf /var/run/dbus; mkdir -p /var/run/dbus; rm -f /var/run/dbus.pid; dbus-uuidgen --ensure; /usr/bin/dbus-daemon --system --nofork"
     restart="yes" />

<!-- HALD -->
<!-- credits to KKtm from the Gentoo Forums... -->
    <daemon id="daemon-hald"
     name="Hardware Abstraction Layer Daemon"
     provides="hal"
     requires="mount/critical:dbus"
     command="/usr/sbin/hald --daemon=no --use-syslog"
     restart="yes" />

<!-- ACPI --> 
<!-- ... and more credits to KKtm from the Gentoo Forums :) -->
    <daemon id="daemon-acpi"
     name="Advanced Configuration and Power Interface daemon"
     provides="acpi"
     requires="mount/critical"
     command="/usr/sbin/acpid --foreground"
     restart="yes" />

<!-- Syslog -->
    <daemon id="daemon-metalog"
     name="Syslogger (metalog)"
     provides="syslog"
     requires="mount/critical"
     command="/usr/sbin/metalog"
     restart="yes" />

<!-- haader uses syslog-ng - thanks haader! ;) -->
    <daemon id="daemon-syslog-ng"
     name="Syslogger (syslog-ng)"
     provides="syslog"
     requires="mount/critical"
     command="/usr/sbin/syslog-ng -F"
     restart="yes" />

<!-- this is for the syslog in busybox -->
    <daemon id="daemon-syslog"
     name="Syslogger (syslog)"
     provides="syslog"
     requires="mount/critical"
     command="/sbin/syslogd -n"
     restart="yes" />

<!-- festival -->
    <daemon id="daemon-tts-festival"
     name="TTS (festival)"
     provides="festival:speechd:tts"
     requires="mount/critical:audio"
     command="/usr/bin/festival --server -b /etc/festival/server.scm"
     restart="yes" />

<!-- network daemoni -->
    <daemon id="daemon-sshd"
     name="SSHd"
     provides="sshd"
     requires="network:mount/critical"
     command="/usr/sbin/sshd -D"
     restart="yes" />

<!-- proxies -->
    <daemon id="daemon-privoxy"
     name="Privoxy Daemon"
     provides="privoxy"
     requires="network:mount/critical"
     command="/usr/sbin/privoxy --no-daemon /etc/privoxy/config"
     restart="yes" />
    <daemon id="daemon-tor"
     name="TOR Daemon"
     provides="tor"
     requires="network:mount/critical"
     command="/usr/bin/tor"
     restart="yes" />

<!-- portmap -->
<!-- you need this for NFS -->
    <daemon id="daemon-portmap"
     name="Portmap Daemon"
     provides="portmap"
     requires="mount/critical"
     command="/sbin/portmap -d"
     restart="yes" />

<!-- X11 -->
<!-- credits to KKtm from the gentoo forums for this one -->
    <daemon id="daemon-gdm"
     name="XDM (GDM)"
     provides="xdm:x11"
     requires="net-lo:video:mount/critical"
     command="/usr/sbin/gdm -nodaemon"
     restart="yes" />

    <daemon id="daemon-kdm"
     name="XDM (KDM)"
     provides="xdm:x11"
     requires="net-lo:video:mount/critical"
     prepare="rm -f /var/run/kdm.pid"
     command="/usr/kde/3.5/bin/kdm -nodaemon"
     restart="yes" />

<!-- credits to haader from the gentoo forums for this one -->
    <daemon id="daemon-xdm"
     name="XDM (xdm)"
     provides="xdm:x11"
     requires="net-lo:video:mount/critical"
     command="/usr/bin/xdm -nodaemon"
     restart="yes" />

    <daemon id="daemon-xorg"
     name="X11 (Xorg)"
     provides="x11"
     requires="net-lo:video:mount/critical"
     command="/usr/X11R6/bin/Xorg :0"
     restart="yes" />

    <daemon id="daemon-xcompmgr"
     name="X11 (xcompmgr)"
     provides="x11-composite"
     requires="x11"
     command="/usr/bin/xcompmgr -c"
     DISPLAY=":0.0"
     restart="yes" />

    <daemon id="daemon-entrance"
     name="XDM (Entrance)"
     provides="xdm"
     requires="x11"
     command="/usr/bin/entrance"
     restart="yes"
     DISPLAY=":0.0"
     HOME="/root" />

<!-- swap -->
    <shell id="shell-swap"
     name="Swap-Device(s)"
     provides="swap"
     requires="mount/system"
     enable="swapon ${configuration_system_swap_device}"
     disable="swapoff ${configuration_system_swap_device}"
     variables="configuration-system-swap/device" />

<!-- modules -->
    <shell-template id="template-shell-kern-module-loader"
     name="Kernel Modules (${system})"
     provides="kern-${system}"
     requires="mount/system"
     enable="
      for x in ${configuration_kernel_modules_${system}};
       do echo $x; modprobe $x;
      done; /bin/true"
     disable="
      for x in ${configuration_kernel_modules_${system}}; do
       ${configuration_command_rmmod} $x;
      done; /bin/true"
     variables="configuration-kernel-modules-${system}:configuration-command-rmmod" />

    <shell id="shell-kern-ethernet"
     based-on-template="template-shell-kern-module-loader"
     disable="/bin/true"
     system="ethernet" />
    <shell id="shell-kern-sound"
     based-on-template="template-shell-kern-module-loader"
     provides="kern-sound:kern-alsa"
     disable="/bin/true"
     system="sound" />
    <shell id="shell-kern-dvb"
     based-on-template="template-shell-kern-module-loader"
     system="dvb" />
    <shell id="shell-kern-arbitrary"
     based-on-template="template-shell-kern-module-loader"
     disable="/bin/true"
     system="arbitrary" />
    <shell id="shell-kern-usb"
     based-on-template="template-shell-kern-module-loader"
     system="usb" />
    <shell id="shell-kern-hid"
     based-on-template="template-shell-kern-module-loader"
     system="hid" />
    <shell id="shell-kern-bluetooth"
     based-on-template="template-shell-kern-module-loader"
     system="bluetooth" />

    <shell id="shell-kern-audio-alsa"
     name="Kernel Modules (ALSA)"
     provides="kern-alsa"
     requires="mount/system"
     enable="
      kernel_modules_alsa=`/sbin/modprobe -c|grep -E '(snd-card|sound-service)-[0-9]'|awk '{print $3}'`;
      for x in ${kernel_modules_alsa};
       do echo $x; modprobe $x;
      done; /bin/true"
     disable="
      kernel_modules_alsa=`cat /proc/asound/modules|awk '{print $2}'`;
      for x in ${kernel_modules_alsa}; do
       ${configuration_command_rmmod} $x;
      done;
      /bin/true"
     variables="configuration-command-rmmod" />

    <shell id="shell-sensors"
     name="LM-Sensors"
     provides="sensors"
     requires="mount/critical"
     enable="
      for x in ${configuration_kernel_modules_sensors};
       do echo $x; modprobe $x;
      done;
      /usr/bin/sensors -s"
     disable="
      for x in ${configuration_kernel_modules_sensors}; do
       ${configuration_command_rmmod} $x;
      done; /bin/true"
     variables="configuration-kernel-modules-sensors:configuration-command-rmmod" />

<!-- nvidia -->
<!-- this would normally only load the module, but somehow uevents seem not to work properly
 with this one... *shrugs* might be an old driver of mine -->
    <shell id="shell-kern-nvidia"
     name="Proprietary NVIDIA X11 Drivers"
     provides="kern-nvidia"
     requires="mount/system"
     enable="modprobe nvidia;
      for i in 0 1 2 3 4 5 6 7; do
       mknod /dev/nvidia$i c 195 $i;
      done;
      mknod /dev/nvidiactl c 195 255;
      chgrp video /dev/nvidia*;
      chmod 0660 /dev/nvidia*;
      /bin/true;"
     disable="${configuration_command_rmmod} nvidia;
      rm /dev/nvidia*"
     variables="configuration-command-rmmod" />

<!-- no guarantee on this one, just wrote what i remember should be working -->
    <shell id="shell-kern-ati"
     name="Proprietary ATI X11 Drivers"
     provides="kern-ati"
     requires="mount/system"
     enable="modprobe fglrx"
     disable="${configuration_command_rmmod} fglrx"
     variables="configuration-command-rmmod" />

<!-- olof from the gentoo forums made a draft for this one -->
    <shell id="shell-915resolution"
     name="Resolution (Intel)"
     provides="video-intel-resolution"
     requires="mount/critical"
     enable="915resolution ${configuration_video_intel_resolution_mode} ${configuration_video_intel_resolution_x} ${configuration_video_intel_resolution_y} ${configuration_video_intel_resolution_bpp} &gt;&gt; /dev/null; /bin/true"
     disable="/bin/true"
     variables="configuration-video-intel-resolution/x:configuration-video-intel-resolution/y:configuration-video-intel-resolution/bpp:configuration-video-intel-resolution/mode" />

<!-- some things that people tend to like :twisted: -->
    <shell id="shell-keyboard"
     name="Console (Keyboard Layout)"
     provides="keyboard"
     requires="mount/local"
     enable="/bin/loadkeys ${configuration_peripherals_keyboard_layout}"
     disable="/bin/loadkeys us"
     variables="configuration-peripherals-keyboard/layout" />

<!--    <shell-template id="template-shell-net-static"
     name="Network (${interface}, static)"
     provides="net-${interface}"
     enable="/sbin/ifconfig ${interface} up ${configuration_network_interfaces_${interface}_address}; route add -net ${configuration_network_interfaces_${interface}_network} gw ${configuration_network_interfaces_${interface}_gateway}"
     disable="ifconfig ${interface} down"
     variables="configuration-network-interfaces-${interface}/.*" /> -->

<!-- revised version of the template - thanks lonn! ;) -->
    <shell-template id="template-shell-net-static"
     name="Network (${interface}, static)"
     provides="net-${interface}"
     enable="/sbin/ifconfig ${interface} up ${configuration_network_interfaces_${interface}_address};
      route add -net ${configuration_network_interfaces_${interface}_network};
      route add default gw ${configuration_network_interfaces_${interface}_gateway}"
     disable="ifconfig ${interface} down"
     variables="configuration-network-interfaces-${interface}/.*" />

    <shell id="shell-net-static-loopback"
     based-on-template="template-shell-net-static"
     interface="lo" />

<!-- Clock -->
    <shell id="shell-clock-ntpdate"
     name="Set the system clock using ntpdate"
     provides="ntpdate"
     requires="mount/critical:network"
     enable="/sbin/hwclock --hctosys ${configuration_program_options_hwclock};
     ntpdate -b pool.ntp.org"
     disable="/sbin/hwclock --systohc ${configuration_program_options_hwclock};
              /bin/true"
     variables="configuration-program-options-hwclock" />

<!-- I modified what KKtm wrote as a mod-daemon -->
    <shell id="shell-clock-hwclock"
     name="Set the system clock using the hardware clock"
     provides="clock"
     requires="mount/system"
     enable="/sbin/hwclock --hctosys ${configuration_program_options_hwclock}"
     disable="/sbin/hwclock --systohc ${configuration_program_options_hwclock};
              /bin/true"
     variables="configuration-program-options-hwclock" />

<!-- another hooray for haader, who contributed this module definition.
    this should (in theory) work for his Atheros WLAN NIC. I slightly modified it to pass the SSID
    as a varialble, just like he wanted. -->
    <shell id="shell-net-ath0"
     name="Network (Wireless, Atheros)"
     requires="mount/system"
     provides="net-ath0"
     enable="pexec-options no-pipe; rm -f /var/run/dhcpcd-ath0.pid ;
             /sbin/modprobe ${configuration_kernel_module_ath0} ;
             /sbin/wlanconfig ath0 create wlandev wifi0 wlanmode sta ;
             /sbin/iwconfig ath0 essid ${configuration_network_wireless_ssid} ;
             /sbin/iwpriv ath0 mode 3 ;
             /sbin/wpa_supplicant -Dmadwifi -c/etc/wpa_supplicant.conf -W -B -iath0 -P/var/run/wpa_supplicant-ath0.pid ;
             /bin/wpa_cli -iath0 -B ;
             dhcpcd ath0 ;
             /sbin/ifconfig ath0 ; "
     disable="${configuration_command_rmmod} ${configuration_kernel_module_ath0}"
     variables="configuration-kernel-module-ath0:configuration-network-wireless-ssid:configuration-command-rmmod" />

<!-- ALSA -->
    <shell id="shell-audio-alsa"
     name="Audio (ALSA)"
     provides="alsa"
     requires="kern-alsa:mount/critical"
     enable="/usr/sbin/alsactl -f ${configuration_audio_alsa_mixer_file} restore;"
     disable="/usr/sbin/alsactl -f ${configuration_audio_alsa_mixer_file} store; /bin/true"
     variables="configuration-audio-alsa-mixer/file" />

<!-- DHCPcd -->
    <shell-template id="template-shell-net-dhcp"
     name="Network (${interface}, using DHCP)"
     provides="net-${interface}"
     requires="kern-ethernet:mount/critical"
     enable="pexec-options no-pipe; rm -f /var/run/dhcpcd-${interface}.pid; /sbin/dhcpcd -d -t ${configuration_network_dhcp_timeout} ${interface};"
     disable="killall dhcpcd; rm -f /var/run/dhcpcd-${interface}.pid;"
     variables="configuration-network-dhcp-timeout" />

    <shell id="shell-net-eth0-dhcp"
     based-on-template="template-shell-net-dhcp"
     interface="eth0" />

<!-- mythtv -->
<!-- damn this thing's a bitch -->
    <shell id="shell-mythtv-backend"
     name="MythTV Backend"
     provides="mythtv"
     requires="network:mount/critical:kern-dvb"
     enable="/usr/bin/mythbackend --logfile /var/log/mythtv/mythbackend --daemon"
     disable="killall mythbackend; /bin/true"
     HOME="/etc/mythtv"/>

<!-- CpuFrequtils -->
<!-- original credits to yoyo for this one, and to Lloeki for enhancing it to work with multi-CPU/-core systems -->
    <shell id="shell-cpufreq"
     name="Cpufreq Governor"
     provides="cpufreq"
     requires="mount/critical:acpi"
     enable="for i in ${configuration_program_options_cpufreq_cpus};
      do /usr/bin/cpufreq-set --cpu $i --governor ${configuration_program_options_cpufreq_governor} ;
      done; /bin/true"
     disable="for i in ${configuration_program_options_cpufreq_cpus} ;
      do /usr/bin/cpufreq-set --cpu $i --governor performance ;
      done; /bin/true"
     variables="configuration-program-options-cpufreq-governor:configuration-program-options-cpufreq-cpus" />


<!-- fcron -->
<!-- this one was written by Janax@Gentoo Forums -->
    <daemon id="daemon-fcron"
     name="Cron (fcron)"
     provides="cron"
     requires="mount/critical"
     command="/usr/sbin/fcron -f -c /etc/fcron/fcron.conf"
     restart="yes" />

<!-- Bluetooth modules, thanks Lloeki!
    err, i modified one variable ;) -->
     <shell id="shell-bluez-hid2hci"
      name="Bluetooth (HID2HCI)"
      provides="bluetooth-hid2hci"
      requires="mount/local:kern-bluetooth"
      enable="/usr/sbin/hid2hci -0 -q"
      disable="/bin/true" />

     <shell id="shell-bluez-rfcomm"
      name="Bluetooth (RFCOMM)"
      provides="bluetooth-rfcomm"
      requires="mount/local:kern-bluetooth:bluetooth-hci"
      enable="/usr/bin/rfcomm -f /etc/bluetooth/rfcomm.conf bind all"
      disable="/usr/bin/rfcomm release all" />

     <daemon id="daemon-bluez-hcid"
      name="Bluetooth (HCId)"
      provides="bluetooth-hci"
      requires="mount/critical:kern-bluetooth"
      command="sleep 1 ; /usr/sbin/hcid -n -f /etc/bluetooth/hcid.conf"
      restart="yes" /> 

     <daemon id="daemon-bluez-sdpd"
      name="Bluetooth (SDPd)"
      provides="bluetooth-sdp"
      requires="mount/critical:kern-bluetooth:bluetooth-hci"
      command="/usr/sbin/sdpd -n"
      restart="yes" />

     <daemon id="shell-bluez-hidd"
      name="Bluetooth (HIDd)"
      provides="bluetooth-hid"
      requires="mount/critical:kern-bluetooth:bluetooth-hci"
      command="/usr/bin/hidd ${configuration_bluetooth_hidd_options} --server -n"
      restart="yes"
      variables="configuration-bluetooth-hidd/options" />

<!-- Credits to DieselPower for these :) -->
<!-- slightly modified by rmh3093 (presumably so that they don't fork(?)) -->
     <daemon id="daemon-smbd"
      name="Samba-daemon"
      provides="smbd"
      requires="mount/local:net-lo:nmbd"
      command="/usr/sbin/smbd -F -s /etc/samba/smb.conf"
      restart="yes" />

     <daemon id="daemon-nmbd"
      name="NetBIOS name server"
      provides="nmbd"
      requires="mount/local:net-lo"
      command="/usr/sbin/nmbd -F"
      restart="yes" />

<!-- creds to lloeki for the next three :) -->
     <daemon id="daemon-lighttpd"
      name="HTTPd (Lighty)"
      provides="httpd"
      requires="mount/local:net-lo"
      command="/usr/sbin/lighttpd -D -f /etc/lighttpd/lighttpd.conf"
      restart="yes" />

     <daemon id="daemon-vixie-cron"
      name="Cron (Vixie)"
      provides="cron"
      requires="mount/local:net-lo"
      command="/usr/sbin/cron -n"
      restart="yes" />

     <daemon id="daemon-mysqld"
      name="Database (MySQL)"
      provides="mysqld"
      requires="mount/local:net-lo"
      command="/usr/sbin/mysqld --defaults-file=/etc/mysql/my.cnf"
      restart="yes" />

<!-- w00t haader! :) -->
     <daemon id="daemon-mpd"
      name="Music Player Daemon"
      provides="mpd"
      requires="mount/local"
      command="/usr/bin/mpd --no-create-db --no-daemon"
      restart="yes" />

<!-- modified version of the ivman module by teppic from the wiki -->
     <daemon id="daemon-ivman"
      name="Ikke's Volume Manager (IVMAN)"
      uid="ivman"
      gid="plugdev"
      provides="ivman"
      requires="hald"
      prepare="rm -f /var/run/ivman.pid"
      cleanup="rm -f /var/run/ivman.pid"
      command="/usr/bin/ivman --system --nofork"
      restart="yes" />

<!-- thanks, rmh3093! -->
<!-- this program saves its data the pwd so we must cd to the folder we want to saved data reside -->
     <daemon id="daemon-boinc"
      name="BOINC client"
      provides="boinc"
      requires="mount/critical"
      command="cd /var/lib/boinc; boinc_client"
      restart="yes" />

     <shell id="shell-irqbalance"
      name="irqbalance"
      provides="irqbalance"
      requires="mount/critical"
      enable="irqbalance"
      disable="/bin/true"
      restart="no" />

     <daemon id="daemon-hplip"
      name="HP Linux Imaging and Printing System"
      provides="hplip"
      command="python /usr/share/hplip/hpssd.py -x"
      restart="yes" />

     <shell id="shell-hpiod"
      name="HP I/O Backend Daemon"
      provides="hpiod"
      enable="hpiod"
      disable="killall hpiod"
      restart="yes" />

     <daemon id="deamon-dhcdbd"
      name="dhcdbd"
      provides="dhcdbd"
      requires="dbus"
      command="rm -f /var/run/dhcdbd.pid; dbus-launch dhcdbd -sn"
      restart="yes" />

     <daemon id="daemon-NetworkManager"
      name="NetworkManager"
      provides="NM"
      requires="dhcdbd"
      command="NetworkManager --no-daemon"
      restart="yes" />

     <daemon id="daemon-atieventsd"
      name="atieventsd - ATI external events daemon"
      provides="atieventsd"
      requires="acpi"
      command="/opt/ati/sbin/atieventsd --nodaemon"
      restart="yes" />

     <daemon id="daemon-ipw3945d"
      name="ipw3945d - regulatory daemon"
      provides="ipw3945d"
      requires="mount/critical:kern-ethernet"
      command="rm -f /var/run/ipw3945d.pid; ipw3945d --foreground"
      restart="yes" />

<!-- this handles the modprobing so if dont load the ipw3945 module anywhere else -->
     <shell id="shell-ipw3945"
      name="ipw3945/ipw3945d"
      provides="ipw3945"
      requires="mount/critical"
      enable="modprobe ipw3945; rm -f /var/run/ipw3945d.pid; ipw3945d;
              STATE=$(cat /proc/modules | grep ipw3945 | awk '{print $3}');
              while [ '${STATE}' == '0' ]; do
               modprobe -r ipw3945;
               modprobe ipw3945;
               rm -f /var/run/ipw3945d.pid;
               ipw3945d;
               sleep 1;
               STATE=$(cat /proc/modules | grep ipw3945 | awk '{print $3}');
              done"
      disable="ipw3945d --kill; rmmod ipw3945"
      restart="yes" />

<!--     <daemon id="daemon-cupsd"
      name="cupsd - common unix printing system daemon"
      provides="cupsd"
      requires="mount/critical:net-lo"
      command="cupsd -f"
      restart="yes" /> -->

     <daemon id="daemon-ntpd"
      name="ntpd"
      provides="ntpd"
      requires="mount/critical:net-lo"
      command="ntpd -n"
      restart="yes" />

     <daemon id="daemon-avahi-dnsconfd"
      name="avahi-dnsconfd"
      provides="avahi-dnsconfd"
      requires="avahi-daemon"
      command="avahi-dnsconfd"
      restart="yes" />

     <daemon id="deamon-avahi-daemon"
      name="avahi-daemon"
      provides="avahi-daemon"
      requires="net-lo:mount/critical"
      command="avahi-daemon"
      restart="yes" />

<!-- modules by teppic from the wiki -->
     <daemon id="daemon-cupsd"
      name="CUPS (Common Unix Printing System)"
      provides="cupsd"
      requires="network:syslog:mount/critical"
      command="/usr/sbin/cupsd -F"
      restart="yes" />

     <shell id="shell-dovecot"
      name="IMAP/POP3 server (Dovecot)"
      provides="dovecot"
      requires="network:mount/critical:mysqld"
      enable="/usr/sbin/dovecot"
      disable="/usr/bin/killall dovecot" />
     <shell id="shell-postfix"
      name="postfix"
      uid="postfix"
      provides="mta"
      requires="network:mount/critical"
      enable="/usr/sbin/postfix start"
      disable="/usr/sbin/postfix stop"
      reload="/usr/sbin/postfix reload" />
     <shell id="shell-lisa"
      name="LAN Information Server (LISA)"
      provides="lisa"
      requires="network:mount/critical"
      enable="/usr/kde/3.5/bin/lisa --config=/etc/conf.d/lisa -q"
      disable="/usr/bin/killall lisa" />

   </module>
  </virtual>

  <prefer>
   <kern-alsa s="shell-kern-audio-alsa" />
  </prefer>
 </services>

 <mode id="feedback">
  <enable services="feedback-textual:feedback-graphical" />
 </mode>
 <mode id="boot">
  <enable services="sysconf:mount/local:hostname:tty:keyboard:ipc:syslog:network:sensors:dbus:hal:utmp" critical="mount/critical:tty" />
  <ttys s="tty1-regular" />
 </mode>
 <mode id="default" base="boot">
  <enable services="audio:portmap:clock:xdm:swap:mount/remote" />
  <ttys s="tty2-regular:tty3-regular:tty4-regular:tty5-regular:tty6-regular" />
 </mode>
 <mode id="power-down">
  <disable services="all-but-feedback" />
  <ttys s="none" />
  <before-switch emit-event="power/mps-down-scheduled" />
<!--  <after-switch emit-event="power/mps-down-imminent" ipc="exec /etc/init.d/halt.sh;scheduler power-down" /> -->
  <after-switch emit-event="power/mps-down-imminent" ipc="scheduler power-down" />
 </mode>
 <mode id="power-reset" base="power-down">
  <ttys s="none" />
  <before-switch emit-event="power/reset-scheduled" />
<!--  <after-switch emit-event="power/reset-imminent" ipc="exec /etc/init.d/halt.sh;scheduler power-reset" /> -->
  <after-switch emit-event="power/reset-imminent" ipc="scheduler power-reset" />
 </mode>
</einit>
