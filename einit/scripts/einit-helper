#!/usr/bin/guile \
-e main -s

 a nice helper to (hopefully) ease the pain associated with configuring einit
!#

(use-modules (ice-9 popen))
(use-modules (ice-9 rdelim))

(define ipc-commands (list))
(define is-sandbox #f)
(define is-version-request #f)
(define is-licence-request #f)
(define is-help-request #f)
(define is-module-list-request #f)

(define einit-core "einit-core")
(define einit-control "einit-control")

(define use-existing-einit-process #f)
(define (ipc-read cmd)
        (let* ((port (if use-existing-einit-process
                          (open-input-pipe (string-append einit-control " -- --xml " cmd))
                          (open-input-pipe (string-append einit-core (if is-sandbox " --sandbox" "") " -s --ipc \"--xml " cmd "\""))))
               (str (read-delimited "" port)))

              (close-port port)
              str))

(define (help)
        (display " :: Core Options ::")
        (newline)
        (system (string-append einit-core " --help"))
        (newline)
        (display " :: Advanced Options ::")(newline)
        (display " --wtf                Tell eINIT to check its configuration")(newline)
        (display " --live, -q           Use running eINIT instead of a new one")(newline))

(define (main args)
        (set! einit-core (string-append (dirname (car args)) "/einit-core"))
        (set! einit-control (string-append (dirname (car args)) "/../../../bin/einit-control"))

        (map (lambda (arg)
                     (cond
                        ((or (string=? arg "-v")
                             (string=? arg "--version")) (set! is-version-request #t))
                        ((or (string=? arg "-L")
                             (string=? arg "--licence")) (set! is-licence-request #t))
                        ((or (string=? arg "-h")
                             (string=? arg "--help")) (set! is-help-request #t))
                        ((or (string=? arg "-l")
                             (string=? arg "--list-modules")) (set! is-module-list-request #t))
                        ((or (string=? arg "-q")
                             (string=? arg "--live")) (set! use-existing-einit-process #t))
                        ((string=? arg "--wtf") (set! ipc-commands (append (list "examine configuration") ipc-commands)))
                        ((string=? arg "--sandbox") (set! is-sandbox #t))
                        (else #f)))
             (cdr args))

        (cond
          (is-help-request (help))
          (is-licence-request (system (string-append einit-core " -L")))
          (is-version-request (system (string-append einit-core " -v")))
          (is-module-list-request (display (ipc-read "list modules")))
          ((> (length ipc-commands) 0)
            (if use-existing-einit-process
                (map (lambda (c)
                             (system (string-append einit-control " -- " c)))
                     ipc-commands)
                (system (string-append
                          einit-core
                          (if is-sandbox " --sandbox" "")
                          (letrec ((collect (lambda (lis str)
                                                    (if (null? lis) str
                                                        (string-append " --ipc \"" (car lis) "\"" (collect (cdr lis) str))))))
                            (collect ipc-commands ""))))))
          (else
            (help))))
