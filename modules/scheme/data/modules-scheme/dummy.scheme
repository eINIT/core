; t3h sch3m3z0r dummy modulez0rzzZ!!!11!1

; how to use configuration variables:
; take a guess (based on the following calls ;))
;
;(cfg-add "scheme-test" '("id" . "none") '("s" . "string value") '("w00tsor" . "moo"))
;(display (cfg-get "scheme-test"))
;

; how to use pexec:
;(pexec "/bin/true") -> #t
;(pexec "/bin/false") -> #f
;
; now you know...

; how to send system-wide notices that are logged:
; notice : integer string, ... -> NIL
; first arg is an integer with the severity (1 = fuck, 10+ = debug)
; second and follwing args are strings that are "notice'd"
; example:
(notice 4 "loaded the scheme dummy module")

; this is a dummy function that could be used for any hook.
; dummy-enable-fail : -> #t
; a return value of #t is seen as a "status_ok"

(define (dummy-enable)
 (begin
  (notice 2 "module enable function called")
  #t))

; this is a dummy function that could be used for any hook. it will always fail
; dummy-enable-fail : -> #f

(define (dummy-enable-fail)
 (begin
  (notice 2 "module enable function called, this function is gonna fail")
  #t))

; this is an example for how to define a module
; make-module : string string list list, ... --> NIL
; first arg is the id (should be unique)
; second arg is the actual name
; third is a list that contains lists of strings for the provides, requires, after and before fields (in that order)
; fourth and following are conses (string . function) that map hooks to function calls

(make-module "scheme-dummy" "Scheme Dummy Module"
 '(("scheme-dummy") ("mount-proc" "sysconf")) ; provides scheme-dummy, requires /proc and sysconf
 '(enable . dummy-enable) ; set the enable hook to dummy-enable

; (cons 'enable dummy-enable) ; set the enable hook to dummy-enable

; (cons 'enable (lambda () (notice 4 "hello world"))) ; set the enable hook to a lambda expression.

; the '( . ) trick doesn't work for lambdas and the like, you need to use (cons x y)!

 (cons 'disable (lambda () (pexec "/bin/true"))) ; call /bin/true as the disable action.
 (cons 'reset (lambda () (pexec "/bin/false"))) ; call /bin/true as the rc X disable action.
; these functions need to return a boolean:
;  #t -> action succeeded
;  #f -> action failed
;
; thus, with this example, disabling the module succeeds, calling 'erc scheme-module reset' doesn't !
)

; note: you should always define an "enable" and a "disable" hook, else your module will be reported to malfunction.